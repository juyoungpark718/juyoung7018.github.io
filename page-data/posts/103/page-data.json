{"componentChunkName":"component---src-templates-blog-template-js","path":"/posts/103","result":{"data":{"markdownRemark":{"html":"<h3>원시값에 대한 메소드들이 존재할 수 있는 이유?</h3>\n<p>우리는 string이나 number를 할당한 변수에 여러가지 메소드를 사용할 수 있다.</p>\n<p>이때, 원시값을 가지는 특별한 객체를 만들었다가 객체에서 메소드를 실행하고 새로운 값이 반환되는 것이다.</p>\n<h3>숫자형에서의 메소드들</h3>\n<p><code class=\"language-text\">num.toString(base)</code></p>\n<ul>\n<li>base에 바꿀 진수를 넣으면 된다.(기본값은 10, 2~36까지 가능)</li>\n</ul>\n<p><strong>부정확한 계산</strong></p>\n<p>숫자는 내부적으로 <code class=\"language-text\">64비트 형식 IEEE-754</code>으로 표현되기 때문에 숫자를 저장하려면 정확히 64비트가 필요합니다. 64비트 중 <code class=\"language-text\">52비트는 숫자를 저장</code>하는 데 사용되고, <code class=\"language-text\">11비트는 소수점 위치를(정수는 0)</code>, <code class=\"language-text\">1비트는 부호를 저장</code>하는 데 사용됩니다.</p>\n<p><strong>이유</strong></p>\n<p>숫자는 0과 1로 이루어진 이진수로 변환되어 연속된 메모리 공간에 저장됩니다. 그런데 10진법을 사용하면 쉽게 표현할 수 있는 <code class=\"language-text\">0.1</code>, <code class=\"language-text\">0.2</code> 같은 분수는 이진법으로 표현하면 무한 소수가 됩니다.</p>\n<p><code class=\"language-text\">0.1</code>은 1을 10으로 나눈 수인 <code class=\"language-text\">1/10</code>입니다. 10진법을 사용하면 이러한 숫자를 쉽게 표현할 수 있죠. <code class=\"language-text\">1/10</code>과 <code class=\"language-text\">1/3</code>을 비교해봅시다. <code class=\"language-text\">1/3</code>은 무한 소수 <code class=\"language-text\">0.33333(3)</code>이 됩니다.</p>\n<p>이렇게 <code class=\"language-text\">10</code>의 거듭제곱으로 나눈 값은 10진법에서 잘 동작하지만 <code class=\"language-text\">3</code>으로 나누게 되면 10진법에서 제대로 동작하지 않습니다. 같은 이유로 2진법 체계에서 <code class=\"language-text\">2</code>의 거듭제곱으로 나눈 값은 잘 동작하지만 <code class=\"language-text\">1/10</code>같이 <code class=\"language-text\">2</code>의 거듭제곱이 아닌 값으로 나누게 되면 무한 소수가 되어버립니다.</p>\n<p>10진법에서 1/3을 정확히 나타낼 수 없듯이, 2진법을 사용해 <em>0.1</em> 또는 <em>0.2</em>를 <strong>정확하게</strong> 저장하는 방법은 없습니다.</p>\n<p>IEEE-754에선 가능한 가장 가까운 숫자로 반올림하는 방법을 사용해 이런 문제를 해결합니다. 그런데 반올림 규칙을 적용하면 발생하는 '작은 정밀도 손실’을 우리가 볼 수는 없지만 실제로 손실은 발생합니다.</p>\n<h3>배열의 메서드</h3>\n<ul>\n<li>reduceRight\n<ul>\n<li>reduce와 반대로 배열의 마지막 원소부터 실행</li>\n</ul>\n</li>\n<li>find, filter, map 의 경우 두 번째 인자로 bind할 대상을 넘겨줄 수 있다.</li>\n</ul>\n<h3>Object</h3>\n<p><code class=\"language-text\">Object.entries</code> 함수는 객체를 맵으로 바꿔줌.</p>\n<p><code class=\"language-text\">Object.fromEntries</code> 함수는 맵을 객체로 바꿔줌.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    b<span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    c<span class=\"token operator\">:</span><span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> m2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">fromEntries</span><span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { a: 1, b: 2, c: 3 }</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Weak map과 weak set</h3>\n<p>자바스크립트의 가비지 컬렉터는 해당 값으로 도달 가능하면 메모리에서 삭제하지 않는다.</p>\n<p>그래서 Map, set의 원소로 객체를 저장하게 되면 객체를 null로 바꿔준다 하더라도 삭제가 일어나지 않는다.</p>\n<p>하지만, weak map,set은 객체만 저장할 수 있고 객체의 값이 null이 되면 삭제해준다.</p>\n<h3>Json.stringify</h3>\n<p>순환 참조가 있는 object에는 사용 불가</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> room <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  number<span class=\"token operator\">:</span> <span class=\"token number\">23</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> meetup <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">\"Conference\"</span><span class=\"token punctuation\">,</span>\n  participants<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  place<span class=\"token operator\">:</span> room <span class=\"token comment\">// meetup references room</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nroom<span class=\"token punctuation\">.</span>occupiedBy <span class=\"token operator\">=</span> meetup<span class=\"token punctuation\">;</span> <span class=\"token comment\">// room references meetup</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>meetup<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'participants'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'place'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n{\n  \"title\":\"Conference\",\n  \"participants\":[{\"name\":\"John\"},{\"name\":\"Alice\"}],\n  \"place\":{\"number\":23}\n}\n*/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>두 번째 인자로 뽑고 싶은 key를 전달하면 해당 값만 뽑힌다.</p>\n<p>세 번째 인자는 space의 유무이다(가독성을 높여줌)</p>\n<h3>Json.parse</h3>\n<p>두 번째 인자로 reviver를 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'{\"title\":\"Conference\",\"date\":\"2017-11-30T12:00:00.000Z\"}'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> meetup <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token string\">'date'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> meetup<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 30</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>참고</h3>\n<p><a href=\"https://ko.javascript.info/object-methods\">https://ko.javascript.info/object-methods</a></p>","frontmatter":{"title":"[자바스크립트] 자료형에 대한 메소드","date":"2020년 10월 26일, 23:17"}}},"pageContext":{"slug":"/11/post103/","previous":{"fields":{"slug":"/11/post102/"},"frontmatter":{"title":"[자바스크립트] 객체","path":"/posts/102"}},"next":{"fields":{"slug":"/11/post104/"},"frontmatter":{"title":"객체지향 프로그래밍","path":"/posts/104"}}}}}