{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/posts/77/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<h2>DFS와 BFS</h2>\n<h3>문제 설명</h3>\n<p>그래프를 DFS로 탐색한 결과와 BFS로 탐색한 결과를 출력하는 프로그램을 작성하시오. 단, 방문할 수 있는 정점이 여러 개인 경우에는 정점 번호가 작은 것을 먼저 방문하고, 더 이상 방문할 수 있는 점이 없는 경우 종료한다. 정점 번호는 1번부터 N번까지이다.</p>\n<p><strong><em>입력</em></strong></p>\n<p>첫째 줄에 정점의 개수 N(1 ≤ N ≤ 1,000), 간선의 개수 M(1 ≤ M ≤ 10,000), 탐색을 시작할 정점의 번호 V가 주어진다. 다음 M개의 줄에는 간선이 연결하는 두 정점의 번호가 주어진다. 어떤 두 > 정점 사이에 여러 개의 간선이 있을 수 있다. 입력으로 주어지는 간선은 양방향이다.</p>\n<p><strong><em>출력</em></strong></p>\n<p>첫째 줄에 DFS를 수행한 결과를, 그 다음 줄에는 BFS를 수행한 결과를 출력한다. V부터 방문된 점을 순서대로 출력하면 된다.</p>\n</blockquote>\n<h3>문제 풀이</h3>\n<ol>\n<li>excuteDFS\n<ol>\n<li>방문 확인을 위해 visited배열 선언(+1을 해줘서 정점과 배열 인덱스를 맞춰서 사용.)</li>\n<li>dfs는 스택을 사용해서 구현.</li>\n<li>방문안한 정점이라면 dfs에 push.</li>\n<li>startEdge를 방문했다고 바꿔줌.</li>\n<li>edges를 살펴보면서, 양방향이니까 edge[0],edge[1]에서 연결된 정점을 찾음.</li>\n<li>번호가 작은 순서기 때문에 정렬(내림차).</li>\n<li>stack에 다시 넣어줌.</li>\n</ol>\n</li>\n<li>excuteBFS\n<ol>\n<li>위의 과정에서 pop() 대신 shift()를 사용, 정렬은 오름차순.</li>\n</ol>\n</li>\n</ol>\n<pre><code class=\"language-js\">const fs = require(\"fs\");\nconst input = fs.readFileSync(\"/dev/stdin\").toString().trim().split(\"\\n\");\n// const input = fs.readFileSync(\"./stdin\").toString().trim().split(\"\\n\");\n\nconst [vertexsLength, _, START] = input[0]\n  .trim()\n  .split(\" \")\n  .map(element => Number(element));\n\nconst getEdges = input => {\n  const edges = [];\n  input.forEach(edge => {\n    const [start, end] = edge.split(\" \").map(element => Number(element));\n    edges.push([start, end]);\n  });\n  return edges;\n};\n\nconst excuteDFS = (edges, start, vertexsLength) => {\n  const visited = Array(vertexsLength + 1).fill(false);\n  const stack = [start];\n  const dfs = [];\n  while (stack.length !== 0) {\n    let startEdge = stack.pop();\n    if (!visited[startEdge]) dfs.push(startEdge);\n    visited[startEdge] = true;\n    let connectEdges = [];\n    edges.forEach(edge => {\n      if (edge[0] === startEdge &#x26;&#x26; !visited[edge[1]]) {\n        connectEdges.push(edge[1]);\n      } else if (edge[1] === startEdge &#x26;&#x26; !visited[edge[0]]) {\n        connectEdges.push(edge[0]);\n      }\n    });\n    connectEdges.sort((a, b) => b - a);\n    stack.push(...connectEdges);\n  }\n  return dfs;\n};\n\nconst excuteBFS = (edges, start, vertexsLength) => {\n  const visited = Array(vertexsLength + 1).fill(false);\n  const queue = [start];\n  const bfs = [];\n  while (queue.length !== 0) {\n    let startEdge = queue.shift();\n    if (!visited[startEdge]) bfs.push(startEdge);\n    visited[startEdge] = true;\n    let connectEdges = [];\n    edges.forEach(edge => {\n      if (edge[0] === startEdge &#x26;&#x26; !visited[edge[1]]) {\n        connectEdges.push(edge[1]);\n      } else if (edge[1] === startEdge &#x26;&#x26; !visited[edge[0]]) {\n        connectEdges.push(edge[0]);\n      }\n    });\n    connectEdges.sort((a, b) => a - b);\n    queue.push(...connectEdges);\n  }\n  return bfs;\n};\n\nconst print = result => {\n  let resultString = \"\";\n  result.forEach(element => {\n    resultString += `${element} `;\n  });\n  console.log(resultString);\n};\n\nconst edges = getEdges(input.slice(1, input.length));\nconst resultDFS = excuteDFS(edges, START, vertexsLength);\nconst resultBFS = excuteBFS(edges, START, vertexsLength);\n\nprint(resultDFS);\nprint(resultBFS);\n</code></pre>","frontmatter":{"title":"[백준] 1260번 DFS와BFS","date":"2020년 07월 17일, 10:30"}}},"pageContext":{"slug":"/8/post77/","previous":{"fields":{"slug":"/8/post76/"},"frontmatter":{"title":"[프로그래머스] 레벨3 (level3) 매칭 점수","path":"/posts/76"}},"next":{"fields":{"slug":"/8/post78/"},"frontmatter":{"title":"[백준] 1012번 유기농 배추","path":"/posts/78"}}}},"staticQueryHashes":["3649515864"],"slicesMap":{}}