{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/posts/152/","result":{"data":{"markdownRemark":{"html":"<p>더 작은 번들을 만들고 리소스 우선순위를 올바르게 제어하기 위해서 사용하며, 잘 활용하면 로드 시간에 영향을 크게 줄 수 있다.</p>\n<p>코드 스플리팅은 세가지 방식으로 접근할 수 있다.</p>\n<ul>\n<li>Entry Points: <code>entry</code> 설정을 사용하여 코드를 수동으로 분할</li>\n<li>Prevent Duplication: <code>Entry dependecies</code>또는 <code>SplitChunksPlugin</code>을 사용하여 중복 청크를 제거하고 청크를 분할</li>\n<li>Dynamic Imports: 모듈 내에서 인라인 함수 호출을 통해 코드를 분할</li>\n</ul>\n<h3>Entry Points</h3>\n<p><code>entry</code>를 다르게 설정해서 번들 파일이 <code>entry</code>만큼 생기게 한다.</p>\n<p>ex)</p>\n<pre><code class=\"language-js\">const path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  mode: 'development',\n  entry: {\n    index: './src/index.js',\n    another: './src/another-module.js',\n  },\n  output: {\n    filename: 'main.js',\n    filename: '[name].bundle.js',\n     path: path.resolve(__dirname, 'dist'),\n  },\n};\n</code></pre>\n<p>위의 방식에는 문제점이 있는데, <code>entry chunk</code>사이에 중복된 모듈은 두 번들에 모두 포함되는 것이다.\n중복을 막기 위해서는 <code>Prevent Duplication</code>을 적용해야한다.</p>\n<h3>Prevent Duplication</h3>\n<p><code>dependOn</code> 옵션을 통해서 청크간 공유할 모듈을 정해줄 수 있다.\n값은 string 또는 string[]이 될 수 있다.</p>\n<p>ex)</p>\n<pre><code class=\"language-js\">const path = require(\"path\");\n\nmodule.exports = {\n  mode: \"development\",\n  entry: {\n    index: \"./src/index.js\",\n    another: \"./src/another-module.js\",\n    index: {\n      import: \"./src/index.js\",\n      dependOn: \"shared\",\n    },\n    another: {\n      import: \"./src/another-module.js\",\n      dependOn: \"shared\",\n    },\n    shared: \"lodash\",\n  },\n  output: {\n    filename: \"[name].bundle.js\",\n    path: path.resolve(__dirname, \"dist\"),\n  },\n};\n</code></pre>\n<p>주의할 점은 단일 페이지에서 여러 엔트리를 사용하는 경우 <code>optimization.runtimeChunk: 'single'</code> 옵션을 꼭 넣어줘야한다.</p>\n<p>그렇지 않으면, 아래와 같은 문제가 생길 수 있다. <a href=\"https://bundlers.tooling.report/code-splitting/multi-entry/\">참고</a></p>\n<p><strong>index.html</strong></p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;script src=\"component-1.js\">&#x3C;/script>\n&#x3C;script src=\"component-2.js\">&#x3C;/script>\n</code></pre>\n<p><strong>component-1.js</strong></p>\n<pre><code class=\"language-js\">import obj from './obj.js';\nobj.count++;\nconsole.log('component-1', obj.count);\n</code></pre>\n<p><strong>component-2.js</strong></p>\n<pre><code class=\"language-js\">import obj from './obj.js';\nobj.count++;\nconsole.log('component-2', obj.count);\n</code></pre>\n<p><strong>obj.js</strong></p>\n<pre><code class=\"language-js\">export default { count: 0 };\n</code></pre>\n<p><strong>결과</strong></p>\n<p>component-1 1\ncomponent-2 2</p>\n<h3>SplitChunksPlugin</h3>\n<p>해당 플러그인을 사용하면 기존 entry chunk 또는 완전히 새로운 chunk로 공통 의존성을 추출할 수 있다.</p>\n<p>ex)</p>\n<pre><code class=\"language-js\">const path = require(\"path\");\n\nmodule.exports = {\n  mode: \"development\",\n  entry: {\n    index: \"./src/index.js\",\n    another: \"./src/another-module.js\",\n  },\n  output: {\n    filename: \"[name].bundle.js\",\n    path: path.resolve(__dirname, \"dist\"),\n  },\n  optimization: {\n    splitChunks: {\n      chunks: \"all\",\n    },\n  },\n};\n</code></pre>\n<p><code>optimization.splitChunks</code>설정을 적용하면 <code>lodash</code>가 분리되는 것을 볼 수 있다.</p>\n<p>참고) <code>mini-css-extract-plugin</code>을 이용하면 css를 분리할 수 있다.</p>\n<p>webpack v4이전에는 <code>CommonChunkPlugin</code>을 사용한 것 강튼데 v4부터는 <code>SplitChunksPlugin</code>을 사용한다.</p>\n<p>SplitChunksPlugin에 대해서 조금 더 자세히 알아보자.</p>\n<p>SplitChunksPlugin은 아래 조건에 따라 자동으로 청크를 분할한다.</p>\n<ul>\n<li>새 청크를 공유 할 수 있거나 모듈이 <code>node_modules</code> 폴더에 있는 경우</li>\n<li>새 청크가 20kb보다 클 경우(min+gz 이전에)</li>\n<li>요청 시 청크를 로드할 때 최대 병렬 요청 수가 30개 이하일 경우</li>\n<li>초기 페이지 로드 시 최대 병렬 요청 수가 30개 이하일 경우</li>\n</ul>\n<p>마지막 두 개의 조건을 충족하려고 하는 경우에는 더 큰 청크가 선호된다고 한다.</p>","frontmatter":{"title":"Webpack 코드 스플리팅","date":"2022년 12월 13일, 01:18"}}},"pageContext":{"slug":"/16/post152/","previous":{"fields":{"slug":"/16/post151/"},"frontmatter":{"title":"[우아한 테크캠프] 4기 준비 과정 그리고 면접 후기","path":"/posts/151"}},"next":{"fields":{"slug":"/16/post153/"},"frontmatter":{"title":"Nestjs","path":"/posts/153"}}}},"staticQueryHashes":["3649515864"],"slicesMap":{}}