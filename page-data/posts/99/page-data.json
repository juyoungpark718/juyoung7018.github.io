{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/posts/99/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<h2>연산자 끼워넣기</h2>\n<h3>문제 설명</h3>\n<p>N개의 수로 이루어진 수열 A1, A2, ..., AN이 주어진다. 또, 수와 수 사이에 끼워넣을 수 있는 N-1개의 연산자가 주어진다. 연산자는 덧셈(+), 뺄셈(-), 곱셈(×), 나눗셈(÷)으로만 이루어져 있다.</p>\n<p>우리는 수와 수 사이에 연산자를 하나씩 넣어서, 수식을 하나 만들 수 있다. 이때, 주어진 수의 순서를 바꾸면 안 된다.</p>\n<p>예를 들어, 6개의 수로 이루어진 수열이 1, 2, 3, 4, 5, 6이고, 주어진 연산자가 덧셈(+) 2개, 뺄셈(-) 1개, 곱셈(×) 1개, 나눗셈(÷) 1개인 경우에는 총 60가지의 식을 만들 수 있다. 예를 들어, 아래와 같은 식을 만들 수 있다.</p>\n<ul>\n<li>1+2+3-4×5÷6</li>\n<li>1÷2+3+4-5×6</li>\n<li>1+2÷3×4-5+6</li>\n<li>1÷2×3-4+5+6</li>\n</ul>\n<p>식의 계산은 연산자 우선 순위를 무시하고 앞에서부터 진행해야 한다. 또, 나눗셈은 정수 나눗셈으로 몫만 취한다. 음수를 양수로 나눌 때는 C++14의 기준을 따른다. 즉, 양수로 바꾼 뒤 몫을 취하고, 그 몫을 음수로 바꾼 것과 같다. 이에 따라서, 위의 식 4개의 결과를 계산해보면 아래와 같다.</p>\n<ul>\n<li>1+2+3-4×5÷6 = 1</li>\n<li>1÷2+3+4-5×6 = 12</li>\n<li>1+2÷3×4-5+6 = 5</li>\n<li>1÷2×3-4+5+6 = 7</li>\n</ul>\n<p>N개의 수와 N-1개의 연산자가 주어졌을 때, 만들 수 있는 식의 결과가 최대인 것과 최소인 것을 구하는 프로그램을 작성하시오.</p>\n<p><strong>입력</strong>\n첫째 줄에 수의 개수 N(2 ≤ N ≤ 11)가 주어진다. 둘째 줄에는 A1, A2, ..., AN이 주어진다. (1 ≤ Ai ≤ 100) 셋째 줄에는 합이 N-1인 4개의 정수가 주어지는데, 차례대로 덧셈(+)의 개수, 뺄셈(-)의 개수, 곱셈(×)의 개수, 나눗셈(÷)의 개수이다.</p>\n<p><strong>출력</strong>\n첫째 줄에 만들 수 있는 식의 결과의 최댓값을, 둘째 줄에는 최솟값을 출력한다. 연산자를 어떻게 끼워넣어도 항상 -10억보다 크거나 같고, 10억보다 작거나 같은 결과가 나오는 입력만 주어진다. 또한, 앞에서부터 계산했을 때, 중간에 계산되는 식의 결과도 항상 -10억보다 크거나 같고, 10억보다 작거나 같다.</p>\n</blockquote>\n<h3>문제 풀이</h3>\n<p>모든 경우에 대해서 계산하고, max,min을 구하면 된다.\n여기서 근데 유의할 점은 2가지가 있다.</p>\n<ol>\n<li>max, min의 초기값.\n<ul>\n<li>-10억~10억이기 때문에 초기갑 설정을 max = -10억, min = 10억으로 해줘야한다.</li>\n</ul>\n</li>\n<li>자바스크립트는 number가 실수형.<a href=\"https://www.acmicpc.net/board/view/51996\">백준 질문 게시판</a> - sait2000님 답변.\n<ul>\n<li>환경에 따라 +0, -0이 찍힐 수 있다. 그래서 max,min이 +0,-0 일 때, 0으로 바꿔주는 코드를 추가해줘야한다.</li>\n</ul>\n</li>\n</ol>\n<pre><code class=\"language-js\">const fs = require(\"fs\");\nconst input = fs.readFileSync(\"/dev/stdin\").toString().trim().split(\"\\n\");\n// const input = fs.readFileSync(\"./stdin\").toString().trim().split(\"\\n\");\nconst [PLUS, MINUS, MULTI, DIV] = [0, 1, 2, 3];\n\nconst len = +input[0];\nconst numbers = input[1].split(\" \").map(e => +e);\nconst ops = input[2].split(\" \").map(e => +e);\nlet max = -Infinity;\nlet min = Infinity;\n\nconst operate = (operation, rand1, rand2) => {\n  switch (operation) {\n    case PLUS:\n      return rand1 + rand2;\n    case MINUS:\n      return rand1 - rand2;\n    case MULTI:\n      return rand1 * rand2;\n    case DIV:\n      return rand1 &#x3C; 0\n        ? -1 * Math.floor(Math.abs(rand1) / rand2)\n        : Math.floor(rand1 / rand2);\n  }\n};\n\nconst backtracking = (index, number, used = [0, 0, 0, 0]) => {\n  if (index === len) {\n    max = Math.max(max, number);\n    min = Math.min(min, number);\n    return;\n  }\n  const rand2 = numbers[index];\n  for (let i = 0; i &#x3C; 4; i++) {\n    if (used[i] === ops[i]) {\n      continue;\n    }\n    const temp = [...used];\n    temp[i]++;\n    const result = operate(i, number, rand2);\n    backtracking(++index, result, temp);\n    index--;\n  }\n};\n\nbacktracking(1, numbers[0]);\nconsole.log(max ? max : 0);\nconsole.log(min ? min : 0);\n</code></pre>","frontmatter":{"title":"[백준] 14888번 연산자 끼워넣기","date":"2020년 09월 04일, 00:30"}}},"pageContext":{"slug":"/10/post99/","previous":{"fields":{"slug":"/10/post98/"},"frontmatter":{"title":"[프로그래머스] 레벨4 (level4) 징검다리","path":"/posts/98"}},"next":{"fields":{"slug":"/11/post100/"},"frontmatter":{"title":"[자바스크립트] this","path":"/posts/100"}}}},"staticQueryHashes":["3649515864"],"slicesMap":{}}