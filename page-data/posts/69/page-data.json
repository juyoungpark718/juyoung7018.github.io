{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/posts/69/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<h2>막대기</h2>\n<h3>문제 설명</h3>\n<p>지민이는 길이가 64cm인 막대를 가지고 있다. 어느 날, 그는 길이가 Xcm인 막대가 가지고 싶어졌다. 지민이는 원래 가지고 있던 막대를 더 작은 막대로 자른다음에, 풀로 붙여서 길이가 Xcm인 막대를 만들려고 한다.</p>\n<p>막대를 자르는 가장 쉬운 방법은 절반으로 자르는 것이다. 지민이는 아래와 같은 과정을 거쳐서 막대를 자르려고 한다.</p>\n<ol>\n<li>지민이가 가지고 있는 막대의 길이를 모두 더한다. 처음에는 64cm 막대 하나만 가지고 있다. 이때, 합이 X보다 크다면, 아래와 같은 과정을 반복한다.\n<ol>\n<li>가지고 있는 막대 중 길이가 가장 짧은 것을 절반으로 자른다.</li>\n<li>만약, 위에서 자른 막대의 절반 중 하나를 버리고 남아있는 막대의 길이의 합이 X보다 크거나 같다면, 위에서 자른 막대의 절반 중 하나를 버린다.</li>\n</ol>\n</li>\n<li>이제, 남아있는 모든 막대를 풀로 붙여서 Xcm를 만든다.</li>\n</ol>\n<p>X가 주어졌을 때, 위의 과정을 거친다면, 몇 개의 막대를 풀로 붙여서 Xcm를 만들 수 있는지 구하는 프로그램을 작성하시오.</p>\n<p><strong><em>입력</em></strong><br>\n첫째 줄에 X가 주어진다. X는 64보다 작거나 같은 자연수이다.</p>\n<p><strong><em>출력</em></strong><br>\n문제의 과정을 거친다면, 몇 개의 막대를 풀로 붙여서 Xcm를 만들 수 있는지 출력한다.</p>\n<table>\n<thead>\n<tr>\n<th>예제 입력</th>\n<th>예제 출력</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>23</td>\n<td>4</td>\n</tr>\n<tr>\n<td>32</td>\n<td>1</td>\n</tr>\n<tr>\n<td>64</td>\n<td>1</td>\n</tr>\n<tr>\n<td>48</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h3>문제 풀이</h3>\n<ol>\n<li>total과 bars는 맨 처음 64밖에 없으므로 초기화 시켜준다.</li>\n<li>target 과 total이 같아질 때까지 while문을 돌린다.</li>\n<li>total이 target보다 크다면, 제일 작은값을 꺼내 반으로 자르고, bars에 넣어준다.</li>\n<li>만약 bars의 total이 target보다 작다면 반으로 자른 값을 하나 더 넣어준다.</li>\n<li>total을 bars의 총 합으로 바꿔준다.</li>\n</ol>\n<pre><code class=\"language-js\">var fs = require(\"fs\");\n// var s = fs.readFileSync('/dev/stdin').toString().split('');\nvar target = fs.readFileSync(\"./stdin\").toString();\ntarget = Number(target);\nlet total = 64;\nlet bars = [64];\n\nwhile (target !== total) {\n  if (total > target) {\n    let cut = bars.pop() / 2;\n    bars.push(cut);\n    if (bars.reduce((a, b) => a + b, 0) &#x3C; target) {\n      bars.push(cut);\n    }\n  }\n  total = bars.reduce((a, b) => a + b, 0);\n}\n\nconsole.log(bars.length);\n</code></pre>","frontmatter":{"title":"[백준] 1094번 막대기","date":"2020년 07월 09일, 23:55"}}},"pageContext":{"slug":"/7/post69/","previous":{"fields":{"slug":"/7/post68/"},"frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 조이스틱","path":"/posts/68"}},"next":{"fields":{"slug":"/7/post70/"},"frontmatter":{"title":"[프로그래머스] 레벨4 (level4) 가사 검색","path":"/posts/70"}}}},"staticQueryHashes":["3649515864"],"slicesMap":{}}