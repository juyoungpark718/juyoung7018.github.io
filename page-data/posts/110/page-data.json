{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/posts/110/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<h2>순위</h2>\n<h3>문제 설명</h3>\n<p>n명의 권투선수가 권투 대회에 참여했고 각각 1번부터 n번까지 번호를 받았습니다. 권투 경기는 1대1 방식으로 진행이 되고, 만약 A 선수가 B 선수보다 실력이 좋다면 A 선수는 B 선수를 항상 이깁니다. 심판은 주어진 경기 결과를 가지고 선수들의 순위를 매기려 합니다. 하지만 몇몇 경기 결과를 분실하여 정확하게 순위를 매길 수 없습니다.</p>\n<p>선수의 수 n, 경기 결과를 담은 2차원 배열 results가 매개변수로 주어질 때 정확하게 순위를 매길 수 있는 선수의 수를 return 하도록 solution 함수를 작성해주세요.</p>\n<p><strong><em>제한사항</em></strong></p>\n<ul>\n<li>선수의 수는 1명 이상 100명 이하입니다.</li>\n<li>경기 결과는 1개 이상 4,500개 이하입니다.</li>\n<li>results 배열 각 행 [A, B]는 A 선수가 B 선수를 이겼다는 의미입니다.</li>\n<li>모든 경기 결과에는 모순이 없습니다.</li>\n</ul>\n<p><strong><em>입출력 예</em></strong></p>\n<table>\n<thead>\n<tr>\n<th>n</th>\n<th>results</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5</td>\n<td>[[4, 3], [4, 2], [3, 2], [1, 2], [2, 5]]</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h3>문제 풀이</h3>\n<p>순위를 정확하게 알 수 있는 애들은 다른 모든 선수와 경기를 한 선수.<br>\n따라서, 자기가 이긴 선수들이 이긴 선수들과 자기가 진 선수들을 진 선수를 모았을 때 총 선수 - 1(자기 자신 제외)라면 순위를 알 수 있다.</p>\n<pre><code>1. 경기 결과를 토대로 2차원 배열로 진 선수, 이긴 선수를 만들어준다.\n   1. 자기가 이긴 선수들이 이긴 선수들을 구해준다.\n   2. 자기가 진 선수들을 이긴 선수들을 구해준다.\n2. 이긴, 진 선수의 숫자가 n-1이면 answer를 증가시켜준다.\n</code></pre>\n<p>자기가 이긴 선수들이 이긴 선수들, 자기가 진 선수들을 이긴 선수들을 구할 때에는 재귀를 이용해서 구했는데,<br>\n이 과정에서 이미 탐색했던 선수들을 체크해줘서 런타임 에러를 해결해줬다.</p>\n<h3>소스코드</h3>\n<pre><code class=\"language-js\">function solution(n, results) {\n  let answer = 0;\n  const players = Array(n + 1)\n    .fill(0)\n    .map(() => [[], []]);\n  const grade = Array(n + 1).fill(0);\n\n  for (let i = 1; i &#x3C;= n; i++) {\n    results.forEach(result => {\n      if (result[1] === i) players[i][0].push(result[0]);\n      if (result[0] === i) players[i][1].push(result[1]);\n    });\n  }\n\n  for (let i = 1; i &#x3C;= n; i++) {\n    const visited = Array(n + 1).fill(false);\n    const set = new Set();\n    players[i][0].forEach(winner => {\n      getWinnersOfWinner(players, visited, winner).forEach(e => set.add(e));\n    });\n    players[i][1].forEach(loser => {\n      getLosersOfLoser(players, visited, loser).forEach(el => set.add(el));\n    });\n    if (set.size === n - 1) answer++;\n  }\n\n  return answer;\n}\n\nfunction getWinnersOfWinner(players, visited, winner) {\n  return [\n    winner,\n    ...players[winner][0].reduce((acc, val) => {\n      acc.push(...getWinnersOfWinner(players, visited, val));\n      return acc;\n    }, []),\n  ];\n}\n\nfunction getLosersOfLoser(players, visited, loser) {\n  return [\n    loser,\n    ...players[loser][1].reduce((acc, val) => {\n      acc.push(...getLosersOfLoser(players, visited, val));\n      return acc;\n    }, []),\n  ];\n}\n</code></pre>\n<h3>아쉬운 점 || 느낀 점</h3>\n<p>개인적으로 어려운 문제였다. 재귀함수를 이용해서 풀었는데 백준이였다면 틀렸을 것 같음.<br>\n다른 방법으로도 풀어봐야할 것 같지만 어떻게 풀어야할지 잘 생각이 안나는 문제.<br>\n검색을 해봐야할 것 같다.</p>","frontmatter":{"title":"[프로그래머스] 레벨3 (level3) 순위","date":"2020년 12월 27일, 21:10"}}},"pageContext":{"slug":"/12/post110/","previous":{"fields":{"slug":"/11/post109/"},"frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 기능개발","path":"/posts/109"}},"next":{"fields":{"slug":"/4/post37/"},"frontmatter":{"title":"[프로그래머스] 레벨3 (level3) 디스크컨트롤러","path":"/posts/37"}}}},"staticQueryHashes":["3649515864"],"slicesMap":{}}