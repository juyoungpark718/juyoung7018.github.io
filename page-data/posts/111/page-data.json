{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/posts/111/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<h2>다리를 지나는 트럭</h2>\n<h3>문제 설명</h3>\n<p>문제 설명\n트럭 여러 대가 강을 가로지르는 일 차선 다리를 정해진 순으로 건너려 합니다. 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 알아내야 합니다. 트럭은 1초에 1만큼 움직이며, > 다리 길이는 bridge_length이고 다리는 무게 weight까지 견딥니다.\n※ 트럭이 다리에 완전히 오르지 않은 경우, 이 트럭의 무게는 고려하지 않습니다.</p>\n<p>예를 들어, 길이가 2이고 10kg 무게를 견디는 다리가 있습니다. 무게가 [7, 4, 5, 6]kg인 트럭이 순서대로 최단 시간 안에 다리를 건너려면 다음과 같이 건너야 합니다.</p>\n<p>경과 시간 다리를 지난 트럭 다리를 건너는 트럭 대기 트럭</p>\n<table>\n<thead>\n<tr>\n<th>0</th>\n<th>[]</th>\n<th>[]</th>\n<th>[7,4,5,6]</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1~2</td>\n<td>[]</td>\n<td>[7]</td>\n<td>[4,5,6]</td>\n</tr>\n<tr>\n<td>3</td>\n<td>[7]</td>\n<td>[4]</td>\n<td>[5,6]</td>\n</tr>\n<tr>\n<td>4</td>\n<td>[7]</td>\n<td>[4,5]</td>\n<td>[6]</td>\n</tr>\n<tr>\n<td>5</td>\n<td>[7,4]</td>\n<td>[5]</td>\n<td>[6]</td>\n</tr>\n<tr>\n<td>6~7</td>\n<td>[7,4,5]</td>\n<td>[6]</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>8</td>\n<td>[7,4,5,6]</td>\n<td>[]</td>\n<td>[]</td>\n</tr>\n</tbody>\n</table>\n<p>따라서, 모든 트럭이 다리를 지나려면 최소 8초가 걸립니다.</p>\n<p>solution 함수의 매개변수로 다리 길이 bridge_length, 다리가 견딜 수 있는 무게 weight, 트럭별 무게 truck_weights가 주어집니다. 이때 모든 트럭이 다리를 건너려면 > 최소 몇 초가 걸리는지 return 하도록 solution 함수를 완성하세요.</p>\n<p><strong><em>제한 조건</em></strong></p>\n<ul>\n<li>bridge_length는 1 이상 10,000 이하입니다.</li>\n<li>weight는 1 이상 10,000 이하입니다.</li>\n<li>truck_weights의 길이는 1 이상 10,000 이하입니다.</li>\n<li>모든 트럭의 무게는 1 이상 weight 이하입니다.</li>\n</ul>\n<p><strong><em>입출력 예</em></strong></p>\n<table>\n<thead>\n<tr>\n<th>bridge_length</th>\n<th>weight</th>\n<th>truck_weights</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td>10</td>\n<td>[7,4,5,6]</td>\n<td>8</td>\n</tr>\n<tr>\n<td>100</td>\n<td>100</td>\n<td>[10]</td>\n<td>101</td>\n</tr>\n<tr>\n<td>100</td>\n<td>100</td>\n<td>[10,10,10,10,10,10,10,10,10,10]</td>\n<td>110</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h3>문제 풀이</h3>\n<p>다리를 queue라고 생각하고 트럭을 queue에 넣어준다. 이때 트럭이 다리에 머무른 시간을 갱신시켜준다.\n고려해야하는 경우는 2가지이다.</p>\n<ul>\n<li>다리가 버틸 수 있는 무게보다 현재 다리를 지나고 있는 트럭과 그 다음 지나갈 트럭의 무게의 합이 작거나 같아야한다.</li>\n<li>다리의 길이에 맞게 트럭이 올라가 있어야한다.</li>\n</ul>\n<h3>소스코드</h3>\n<pre><code class=\"language-js\">function solution(bridge_length, weight, truck_weights) {\n  let answer = 0;\n  let trucks = truck_weights.map(weight => {\n    return { weight, time: 0 };\n  });\n\n  let start = trucks.shift();\n  start.time++;\n  let queue = [start];\n  let totalWeights = queue[0].weight;\n\n  while (trucks.length || queue.length) {\n    queue = queue.reduce((newQueue, truck) => {\n      if (truck.time === bridge_length) {\n        totalWeights -= truck.weight;\n        return newQueue;\n      }\n      truck.time++;\n      newQueue.push(truck);\n      return newQueue;\n    }, []);\n    answer++;\n    if (!trucks.length) continue;\n    if (totalWeights + trucks[0].weight > weight) continue;\n    if (queue.length + 1 > bridge_length) continue;\n    const newTruck = trucks.shift();\n    newTruck.time++;\n    queue.push(newTruck);\n    totalWeights += newTruck.weight;\n  }\n\n  return ++answer;\n}\n</code></pre>","frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 다리를 지나는 트럭","date":"2021년 01월 03일, 10:15"}}},"pageContext":{"slug":"/12/post111/","previous":{"fields":{"slug":"/1/post7/"},"frontmatter":{"title":"[우아한 테크캠프] - 3기 지원 후기(1,2차)","path":"/posts/7"}},"next":{"fields":{"slug":"/12/post112/"},"frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 프린터","path":"/posts/112"}}}},"staticQueryHashes":["3649515864"],"slicesMap":{}}