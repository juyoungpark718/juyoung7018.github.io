{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/posts/142/","result":{"data":{"markdownRemark":{"html":"<h3>타입스크립트를 할 때 주의해야할 점 10가지</h3>\n<ol>\n<li>\n<p>tsconfig.json의 strict 옵션을 꼭 설정한다.</p>\n<ul>\n<li>엄격한 룰을 적용시켜놓으면 개발을 하는 과정에서는 힘들지 몰라도 추후 유지보수 과정에서 시간을 절약할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>default 값을 정의해서 사용한다.(?? 연산자를 사용한다)</p>\n<ul>\n<li>파라미터에 default값을 설정해주거나, ??를 이용해서 null 혹은 undefined인 경우에 default 값을 정의해준다.</li>\n</ul>\n</li>\n<li>\n<p>any 타입보다는 unknown을 사용한다.</p>\n<ul>\n<li>any의 경우는 타입 검증을 무력하게 만든다. any의 경우는 type을 체킹해주지 않아도 property에 접근하는 경우 에러가 나지 않지만, unknown은 에러가 난다</li>\n<li>unknown의 경우는 타입 체크가 필수적이므로 any보다 안전하다.</li>\n</ul>\n</li>\n<li>\n<p>val as SomeType을 지양하자.</p>\n<ul>\n<li>type이 실제로 맞는지 아닌지 검증이 이루어지지 않은 경우가 생길 수 있다. 그러므로 타입 가드를 이용해서 타입을 검증을 해주는 것이 더 좋다.</li>\n</ul>\n</li>\n<li>\n<p>테스트에서의 as any를 사용하지 말자.</p>\n</li>\n<li>\n<p>옵셔널 프로퍼티</p>\n<pre><code class=\"language-ts\"> // 나쁜 코드\n interface Product {\n   id: string\n   type: 'digital' | 'physical'\n   weightInKg?: number\n   sizeInMb?: number\n }\n\n // 좋은 코드\n interface Product {\n   id: string\n   type: 'digital' | 'physical'\n }\n\n interface DigitalProduct extends Product {\n   type: 'digital'\n   sizeInMb: number\n }\n\n interface PhysicalProduct extends Product {\n   type: 'physical'\n   weightInKg: number\n }\n</code></pre>\n<p>타입을 사용했을때 가장 큰 장점은 런타임에서 문제가 발생하기 전에 알 수 있다는 점이다.<br>\n좀 더 명시적인 타입을 가질수록 발견되지 않을 수 있었던 버그에 대한 컴파일 타입 검사를 받을 수 있다.</p>\n</li>\n<li>\n<p>한 문자 제너릭을 지양하자.</p>\n<ul>\n<li>제너릭 타입 변수도 변수다. 이름에 의미가 있으면 더욱 파악하기 쉽다.</li>\n</ul>\n</li>\n<li>\n<p>boolean이 아닌 것의 boolean 검사</p>\n<ul>\n<li>0, ''의 경우 false로 취급되는데, 이러한 상황을 위해서 !== undefined or !== null과 같이 명시적으로 해주면 좋다.(실제로 확인하길 원하는 것이 명확해야한다.)</li>\n</ul>\n</li>\n<li>\n<p>!!과 같은 형태를 사용 금지하자.</p>\n<ul>\n<li>숏코드는 이해가 어렵게 만든다. 또 이러한 경우가 잠재적인 버그를 생성할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>!= 보다는 !== 엄격한 연산자를 사용한다.</p>\n</li>\n</ol>\n<h3>참고</h3>\n<ul>\n<li>any와 unknown - <a href=\"https://simsimjae.tistory.com/464\">https://simsimjae.tistory.com/464</a>, <a href=\"https://sambalim.tistory.com/146\">https://sambalim.tistory.com/146</a></li>\n<li><a href=\"https://ui.toast.com/weekly-pick/ko_20210217\">TOAST UI, 올해 버려야 할 타입스크립트 나쁜 버릇 10가지</a></li>\n<li><a href=\"https://typescript-kr.github.io/pages/advanced-types.html#%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EC%9D%98-%ED%83%80%EC%9E%85-%EA%B0%80%EB%93%9C-user-defined-type-guards\">타입스크립트 핸드북</a></li>\n</ul>","frontmatter":{"title":"[아티클럽] 올해 버려야 할 타입스크립트 나쁜 버릇 10가지를 읽고","date":"2021년 05월 17일, 22:21"}}},"pageContext":{"slug":"/15/post142/","previous":{"fields":{"slug":"/15/post141/"},"frontmatter":{"title":"[백준] 1967번 트리의 지름","path":"/posts/141"}},"next":{"fields":{"slug":"/15/post143/"},"frontmatter":{"title":"[RxJS] ReactiveX javascript","path":"/posts/143"}}}},"staticQueryHashes":["3649515864"],"slicesMap":{}}