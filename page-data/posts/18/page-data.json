{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/posts/18/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<h2>점프와 순간이동</h2>\n<h3>문제설명</h3>\n<p>OO 연구소는 한 번에 K 칸을 앞으로 점프하거나, (현재까지 온 거리) x 2 에 해당하는 위치로 순간이동을 할 수 있는 특수한 기능을 가진 아이언 슈트를 개발하여 판매하고 있습니다. 이 아이언 슈트는 건전지로 작동되는데, 순간이동을 하면 건전지 사용량이 줄지 않지만, 앞으로 K 칸을 점프하면 K 만큼의 건전지 사용량이 듭니다. 그러므로 아이언 슈트를 착용하고 이동할 때는 순간 이동을 하는 것이 더 효율적입니다. 아이언 슈트 구매자는 아이언 슈트를 착용하고 거리가 N 만큼 떨어져 있는 장소로 가려고 합니다. 단, 건전지 사용량을 줄이기 위해 점프로 이동하는 것은 최소로 하려고 합니다. 아이언 슈트 구매자가 이동하려는 거리 N이 주어졌을 때, 사용해야 하는 건전지 사용량의 최솟값을 return하는 solution 함수를 만들어 주세요.</p>\n<p>예를 들어 거리가 5만큼 떨어져 있는 장소로 가려고 합니다.\n아이언 슈트를 입고 거리가 5만큼 떨어져 있는 장소로 갈 수 있는 경우의 수는 여러 가지입니다.</p>\n<p>처음 위치 0 에서 5 칸을 앞으로 점프하면 바로 도착하지만, 건전지 사용량이 5 만큼 듭니다.\n처음 위치 0 에서 2 칸을 앞으로 점프한 다음 순간이동 하면 (현재까지 온 거리 : 2) x 2에 해당하는 위치로 이동할 수 있으므로 위치 4로 이동합니다. 이때 1 칸을 앞으로 점프하면 도착하므로 건전지 사용량이 3 만큼 듭니다.\n처음 위치 0 에서 1 칸을 앞으로 점프한 다음 순간이동 하면 (현재까지 온 거리 : 1) x 2에 해당하는 위치로 이동할 수 있으므로 위치 2로 이동됩니다. 이때 다시 순간이동 하면 (현재까지 온 거리 : 2) x 2 만큼 이동할 수 있으므로 위치 4로 이동합니다. 이때 1 칸을 앞으로 점프하면 도착하므로 건전지 사용량이 2 만큼 듭니다.\n위의 3가지 경우 거리가 5만큼 떨어져 있는 장소로 가기 위해서 3번째 경우가 건전지 사용량이 가장 적으므로 답은 2가 됩니다.</p>\n<p><strong><em>제한 사항</em></strong></p>\n<ul>\n<li>숫자 N: 1 이상 10억 이하의 자연수</li>\n<li>숫자 K: 1 이상의 자연수</li>\n</ul>\n<p><strong><em>입출력 예</em></strong></p>\n<table>\n<thead>\n<tr>\n<th>N</th>\n<th>result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5</td>\n<td>2</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2</td>\n</tr>\n<tr>\n<td>5000</td>\n<td>5</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h2>문제풀이</h2>\n<p>처음부터 숫자를 늘릴 생각을 하지말고, 최대 숫자에서부터 줄일 생각을 해야한다.<br>\n예를 들어, 5000의 숫자가 있다면,</p>\n<ol>\n<li>5000/2 = 2500</li>\n<li>2500/2 = 1250</li>\n<li>1250/2 = 625(2로 나눠지지 않는다면 -1)</li>\n<li>625-1 = 624</li>\n<li>624/2 = 312</li>\n<li>312/2 = 156</li>\n<li>156/2 = 78</li>\n<li>78/2 = 39(-1)</li>\n<li>38/2 = 19(-1)</li>\n<li>18/2 = 9(-1)</li>\n<li>8/2 = 4</li>\n<li>4/2 = 2</li>\n<li>2/1 = 1(-1)</li>\n<li>0</li>\n</ol>\n<p>입출력 예 : 5000 -> 5<br>\n위와 같은 과정으로 진행된다. 그래서 -1한 만큼 count++하면 된다.</p>\n<pre><code class=\"language-js\">function solution(n) {\n  var ans = 0;\n\n  while (n !== 1) {\n    if (n % 2 === 0) {\n      n = n / 2;\n    } else {\n      n--;\n      ans++;\n    }\n  }\n\n  return ++ans;\n}\n</code></pre>\n<h4>아쉬운 점 || 느낀 점</h4>\n<p>사실 혼자 힘으로 풀진 않았다. 친구랑 같이 고민하면서 풀었는데,<br>\n프로그래밍을 잘 모르는 친구였지만, 인적성을 잘 푸는 친구여서 그 친구가 말해준 규칙으로 푸니까 쉽게 풀렸다.<br>\n그 친구는 시작에서 값을 구할지, 끝에서부터 값을 구할지 잘 생각해보고,<br>\n나누기를 잘 활용하면 될 것 같다고 했다.<br>\n진짜 뭐가 달랐다.. 인적성과 코테가 비슷하다고 느낌은 받았지만, 오늘 더 받은 것 같다.</p>","frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 점프와 순간이동","date":"2020년 05월 22일, 17:44"}}},"pageContext":{"slug":"/2/post18/","previous":{"fields":{"slug":"/2/post17/"},"frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 소수 만들기","path":"/posts/17"}},"next":{"fields":{"slug":"/2/post19/"},"frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 영어 끝말잇기","path":"/posts/19"}}}},"staticQueryHashes":["3649515864"],"slicesMap":{}}