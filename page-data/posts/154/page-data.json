{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/posts/154/","result":{"data":{"markdownRemark":{"html":"<h3>dotenv 관련</h3>\n<h4>우선순위</h4>\n<p>dotenv 파일에는 읽어오는 우선순위가 있다.</p>\n<p>ex)</p>\n<ul>\n<li>cra에서는 <a href=\"https://create-react-app.dev/docs/adding-custom-environment-variables/#what-other-env-files-can-be-used\">링크</a>와 같이 우선순위를 두고 있다\n<ul>\n<li><code>.env</code>: Default.</li>\n<li><code>.env.local</code>: Local overrides. <strong>This file is loaded for all environments except test.</strong></li>\n<li><code>.env.development</code>, <code>.env.test</code>, <code>.env.production</code>: Environment-specific settings.</li>\n<li><code>.env.development.local</code>, <code>.env.test.local</code>, <code>.env.production.local</code>: Local overrides of environment-specific settings.</li>\n</ul>\n</li>\n<li>vite <a href=\"https://ko.vitejs.dev/guide/env-and-mode.html#env-files\">요기</a></li>\n</ul>\n<p>라이브러리 별로 다른지, 기본적으로 dotenv 설정되어있는지는 잘 모르겠다.</p>\n<h4>라이브러리 별 컨벤션</h4>\n<p>dotenv 파일에서 커스텀 변수명 앞에 붙는 글자들은 라이브러리에서 권장하는 컨벤션이다.</p>\n<p>ex) VITE, REACT_APP, NEXT</p>\n<p>cra에서 REACT_APP을 붙여주지 않으면 안된다.(<a href=\"https://create-react-app.dev/docs/adding-custom-environment-variables/#adding-development-environment-variables-in-env\">참고</a>)</p>\n<h4>dotenv-expand</h4>\n<p><a href=\"https://www.npmjs.com/package/dotenv-expand\">dotenv-expand</a>를 사용해서 .env안에서 변수를 선언해서 사용할 수 있다.</p>\n<p>ex)</p>\n<pre><code>PASSWORD=\"s1mpl3\"\nDB_PASS=$PASSWORD\n</code></pre>\n<h3>Gatsby-remark</h3>\n<p>gatsby-remark의 graphql에서 excerpt를 사용하면 본문 내용을 잘라서 가져올 수 있다.</p>\n<p>ex)</p>\n<pre><code class=\"language-ts\">export const pageQuery = graphql`\n  {\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }, limit: 6) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            path\n            date\n            tags\n          }\n          excerpt(pruneLength: 150, truncate: true, format: PLAIN)\n        }\n      }\n    }\n  }\n`;\n</code></pre>\n<h3>Vite-bundle-visualize</h3>\n<p>vite에서도 번들링된 파일을 분석하고 싶으면 해당 라이브러리를 사용하면 된다.\n보여지는 형태는 ==webpack-bundle-analyzer==와 비슷하다.</p>\n<h3>Sentry error sampling rate</h3>\n<p>센트리를 사용하면 에러에 대한 정보를 얻을 수 있다.\n하지만 너무 많은 양은 문제가 될 수 있어서 적절한 양이 필요한데, 이를 위해서 rate를 설정한다.</p>\n<p>ex) 아래와 같이 rate를 0.25로 설정하면 25%의 에러를 전달한다.</p>\n<pre><code class=\"language-js\">Sentry.init({ sampleRate: 0.25 });\n</code></pre>\n<p>그 외에도 많은 정보에 대해서 sampling rate를 설정할 수 있다.(<a href=\"https://docs.sentry.io/platforms/javascript/configuration/sampling/\">참고</a>)</p>","frontmatter":{"title":"7월 3주차","date":"2023년 07월 25일, 06:00"}}},"pageContext":{"slug":"/16/post154/","previous":{"fields":{"slug":"/16/post153/"},"frontmatter":{"title":"Nestjs","path":"/posts/153"}},"next":{"fields":{"slug":"/16/post155/"},"frontmatter":{"title":"7월 4주차","path":"/posts/155"}}}},"staticQueryHashes":["3649515864"],"slicesMap":{}}