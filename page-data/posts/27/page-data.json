{"componentChunkName":"component---src-templates-blog-template-js","path":"/posts/27","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<h2>방금그곡</h2>\n<h3>문제설명</h3>\n<p>라디오를 자주 듣는 네오는 라디오에서 방금 나왔던 음악이 무슨 음악인지 궁금해질 때가 많다. 그럴 때 네오는 다음 포털의 '방금그곡' 서비스를 이용하곤 한다. 방금그곡에서는 TV, 라디오 등에서 나온 음악에 관해 제목 등의 정보를 제공하는 서비스이다.</p>\n<p>네오는 자신이 기억한 멜로디를 가지고 방금그곡을 이용해 음악을 찾는다. 그런데 라디오 방송에서는 한 음악을 반복해서 재생할 때도 있어서 네오가 기억하고 있는 멜로디는 음악 끝부분과 처음 부분이 이어서 재생된 멜로디일 수도 있다. 반대로, 한 음악을 중간에 끊을 경우 원본 음악에는 네오가 기억한 멜로디가 들어있다 해도 그 곡이 네오가 들은 곡이 아닐 수도 있다. 그렇기 때문에 네오는 기억한 멜로디를 재생 시간과 제공된 악보를 직접 보면서 비교하려고 한다. 다음과 같은 가정을 할 때 네오가 찾으려는 음악의 제목을 구하여라.</p>\n<p>방금그곡 서비스에서는 음악 제목, 재생이 시작되고 끝난 시각, 악보를 제공한다.\n네오가 기억한 멜로디와 악보에 사용되는 음은 C, C#, D, D#, E, F, F#, G, G#, A, A#, B 12개이다.\n각 음은 1분에 1개씩 재생된다. 음악은 반드시 처음부터 재생되며 음악 길이보다 재생된 시간이 길 때는 음악이 끊김 없이 처음부터 반복해서 재생된다. 음악 길이보다 재생된 시간이 짧을 때는 처음부터 재생 시간만큼만 재생된다.\n음악이 00:00를 넘겨서까지 재생되는 일은 없다.\n조건이 일치하는 음악이 여러 개일 때에는 라디오에서 재생된 시간이 제일 긴 음악 제목을 반환한다. 재생된 시간도 같을 경우 먼저 입력된 음악 제목을 반환한다.\n조건이 일치하는 음악이 없을 때에는 **\"(None)\"**을 반환한다.</p>\n<p><strong><em>입력 형식</em></strong></p>\n<p>입력으로 네오가 기억한 멜로디를 담은 문자열 m과 방송된 곡의 정보를 담고 있는 배열 musicinfos가 주어진다.</p>\n<ul>\n<li>m은 음 1개 이상 1439개 이하로 구성되어 있다.</li>\n<li>musicinfos는 100개 이하의 곡 정보를 담고 있는 배열로, 각각의 곡 정보는 음악이 시작한 시각, 끝난 시각, 음악 제목, 악보 정보가 ','로 구분된 문자열이다.\n<ul>\n<li>음악의 시작 시각과 끝난 시각은 24시간 HH:MM 형식이다.</li>\n<li>음악 제목은 ',' 이외의 출력 가능한 문자로 표현된 길이 1 이상 64 이하의 문자열이다.</li>\n<li>악보 정보는 음 1개 이상 1439개 이하로 구성되어 있다.</li>\n</ul>\n</li>\n</ul>\n<p><strong><em>출력 형식</em></strong>\n조건과 일치하는 음악 제목을 출력한다.</p>\n<p><strong><em>입출력 예시</em></strong></p>\n<table>\n<thead>\n<tr>\n<th>m</th>\n<th>musicinfos</th>\n<th>answer</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ABCDEFG</td>\n<td>[\"12:00,12:14,HELLO,CDEFGAB\", \"13:00,13:05,WORLD,ABCDEF\"]</td>\n<td>HELLO</td>\n</tr>\n<tr>\n<td>CC#BCC#BCC#BCC#B</td>\n<td>[\"03:00,03:30,FOO,CC#B\", \"04:00,04:08,BAR,CC#BCC#BCC#B\"]</td>\n<td>FOO</td>\n</tr>\n<tr>\n<td>ABC</td>\n<td>[\"12:00,12:14,HELLO,C#DEFGAB\", \"13:00,13:05,WORLD,ABCDEF\"]</td>\n<td>WORLD</td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>설명</em></strong></p>\n<p>첫 번째 예시에서 HELLO는 길이가 7분이지만 12:00부터 12:14까지 재생되었으므로<br>\n실제로 CDEFG<strong>ABCDEFG</strong>AB로 재생되었고, 이 중에 기억한 멜로디인 <strong>ABCDEFG</strong>가 들어있다.<br>\n세 번째 예시에서 HELLO는 C#DEFGABC#DEFGAB로, WORLD는 ABCDE로 재생되었다.<br>\nHELLO 안에 있는 **ABC#**은 기억한 멜로디인 ABC와 일치하지 않고,<br>\nWORLD 안에 있는 <strong>ABC</strong>가 기억한 멜로디와 일치한다.</p>\n</blockquote>\n<h3>내가 놓친 부분들(<del>만약 못푸신 분들이 본다면 문제풀이 전 확인하고 다시 풀어보는 것도 좋을듯</del>)</h3>\n<ol>\n<li>C#,D#,F#,G#,A#을 생각해야한다.(ABC 와 ABC#은 다름.)</li>\n<li>시간 계산을 하는 곳에서 \"14\" + \"00\"인 경우 \"1400\"이 됨. 숫자로 꼭 바꿔서 계산.(<del>자바스크립트 으으..</del>)</li>\n<li>C#,D#,F#,G#,A#을 하는 부분을 잘 선택(주어진 m과 곡의 악보 둘다 바꾼 다음 계산을 해야함. 아니면 for문이 제대로 작동 x)</li>\n</ol>\n<h3>문제풀이</h3>\n<ol>\n<li>주어진 musicinfos배열을 hash값으로 만듦.</li>\n<li>hash값을 만드는 부분에서, 악보에서 C#,D#,F#,G#,A#을 c,d,f,g,a와 같은 문자들로 치환해서 구별할 수 있게 함.(m에도 사용.)</li>\n<li>m과 매치하는 곡을 고름.\n<ol>\n<li>만약 곡이 1곡이라면 리턴.</li>\n</ol>\n</li>\n<li>m과 매치하는 곡이 여러곡이면,\n<ol>\n<li>정렬한 뒤에 최댓값을 뽑음.\n<ol>\n<li>최댓값인 경우가 1개면 리턴</li>\n<li>최댓값의 경우가 여러개이면, 최댓값인 경우의 곡들을 모두 뽑고 처음에 주어진 배열에서 인덱스가 가장 빠른 순서를 뽑고 리턴.</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">m<span class=\"token punctuation\">,</span> musicinfos</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> answer <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  m <span class=\"token operator\">=</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> musicinfosHash <span class=\"token operator\">=</span> musicinfos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token function\">makeHash</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  musicinfos <span class=\"token operator\">=</span> musicinfosHash<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>totalSheet<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>musicinfos<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"(None)\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>musicinfos<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    musicinfos<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>playTime <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>playTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// console.log(musicinfos);</span>\n    <span class=\"token keyword\">let</span> pickedMusic <span class=\"token operator\">=</span> musicinfos<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> pickedMusicArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>pickedMusic<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// console.log(musicinfos);</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> musicinfos<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// console.log(musicinfos[i])</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pickedMusic<span class=\"token punctuation\">.</span>playTime <span class=\"token operator\">===</span> musicinfos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>playTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        pickedMusicArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>musicinfos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// console.log(pickedMusicArr)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pickedMusicArr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// console.log(pickedMusicArr)</span>\n      <span class=\"token keyword\">let</span> final <span class=\"token operator\">=</span> pickedMusicArr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> idx <span class=\"token operator\">=</span> musicinfosHash<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> el<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> e<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> idx<span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      final<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>idx <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// console.log(final);</span>\n      <span class=\"token keyword\">return</span> final<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> pickedMusicArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> musicinfos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">makeHash</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">musicInfo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> sheet<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> musicInfo<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  sheet <span class=\"token operator\">=</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>sheet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>startHour<span class=\"token punctuation\">,</span> startMinute<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> start<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>endHour<span class=\"token punctuation\">,</span> endMinute<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> end<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> playTime <span class=\"token operator\">=</span>\n    <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>endHour<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">+</span>\n    <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>endMinute<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>startHour<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">+</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>startMinute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> totalSheet <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> playTime<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">/</span> sheet<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> divide <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">/</span> sheet<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      totalSheet <span class=\"token operator\">+=</span> sheet<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> sheet<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> divide<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      totalSheet <span class=\"token operator\">+=</span> sheet<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> totalSheet<span class=\"token punctuation\">,</span> playTime <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  str <span class=\"token operator\">=</span> <span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"C#\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  str <span class=\"token operator\">=</span> <span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"D#\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  str <span class=\"token operator\">=</span> <span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"F#\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"f\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  str <span class=\"token operator\">=</span> <span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"G#\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"g\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  str <span class=\"token operator\">=</span> <span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"A#\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str<span class=\"token punctuation\">,</span> org<span class=\"token punctuation\">,</span> dest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>아쉬운 점 || 느낀 점</h4>\n<p>와 정말 갈수록 문제의 난이도가 어려워지고, 생각해야하는 조건들이 많아진다.<br>\n이걸 다 생각하면서 문제를 제출할 수 있을까 라는 의문도 슬슬 들기 시작한다.<br>\n채점이 있는 문제라면 고쳐가면서 풀 수 있겠지만, 그게 아니라면 너무나 어려울 것 같다.<br>\n생각한다고 하면서 풀지만, 항상 놓치는 부분이 존재한다.<br>\n진짜 갈 길이 너무 멀다...<br>\n<del>그래도 푼 게 어디냐!!</del></p>","frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 방금그곡","date":"2020년 05월 29일, 13:15"}}},"pageContext":{"slug":"/3/post27/","previous":{"fields":{"slug":"/3/post26/"},"frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 소수 찾기","path":"/posts/26"}},"next":{"fields":{"slug":"/3/post28/"},"frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 압축","path":"/posts/28"}}}},"staticQueryHashes":["1791144535","3649515864"]}