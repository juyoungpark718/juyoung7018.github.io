{"componentChunkName":"component---src-templates-blog-template-js","path":"/posts/28","result":{"data":{"markdownRemark":{"html":"<h2>압축</h2>\n<h3>문제설명</h3>\n<blockquote>\n<p>신입사원 어피치는 카카오톡으로 전송되는 메시지를 압축하여 전송 효율을 높이는 업무를 맡게 되었다. 메시지를 압축하더라도 전달되는 정보가 바뀌어서는 안 되므로, 압축 전의 정보를 완벽하게 복원 가능한 무손실 압축 알고리즘을 구현하기로 했다.</p>\n<p>어피치는 여러 압축 알고리즘 중에서 성능이 좋고 구현이 간단한 LZW(Lempel–Ziv–Welch) 압축을 구현하기로 했다. LZW 압축은 1983년 발표된 알고리즘으로, 이미지 파일 포맷인 GIF 등 다양한 응용에서 사용되었다.</p>\n<p>LZW 압축은 다음 과정을 거친다.</p>\n<ol>\n<li>길이가 1인 모든 단어를 포함하도록 사전을 초기화한다.</li>\n<li>사전에서 현재 입력과 일치하는 가장 긴 문자열 w를 찾는다.</li>\n<li>w에 해당하는 사전의 색인 번호를 출력하고, 입력에서 w를 제거한다.</li>\n<li>입력에서 처리되지 않은 다음 글자가 남아있다면(c), w+c에 해당하는 단어를 사전에 등록한다.</li>\n<li>단계 2로 돌아간다.\n압축 알고리즘이 영문 대문자만 처리한다고 할 때, 사전은 다음과 같이 초기화된다. 사전의 색인 번호는 정수값으로 주어지며, 1부터 시작한다고 하자.</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>색인 번호</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>...</th>\n<th>24</th>\n<th>25</th>\n<th>26</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>단어</td>\n<td>A</td>\n<td>B</td>\n<td>C</td>\n<td>...</td>\n<td>X</td>\n<td>Y</td>\n<td>Z</td>\n</tr>\n</tbody>\n</table>\n<p>예를 들어 입력으로 KAKAO가 들어온다고 하자.</p>\n<ol>\n<li>현재 사전에는 KAKAO의 첫 글자 K는 등록되어 있으나, 두 번째 글자까지인 KA는 없으므로, 첫 글자 K에 해당하는 색인 번호 11을 출력하고, 다음 글자인 A를 포함한 KA를 사전에 27 번째로 등록한다.</li>\n<li>두 번째 글자 A는 사전에 있으나, 세 번째 글자까지인 AK는 사전에 없으므로, A의 색인 번호 1을 출력하고, AK를 사전에 28 번째로 등록한다.</li>\n<li>세 번째 글자에서 시작하는 KA가 사전에 있으므로, KA에 해당하는 색인 번호 27을 출력하고, 다음 글자 O를 포함한 KAO를 29 번째로 등록한다.</li>\n<li>마지막으로 처리되지 않은 글자 O에 해당하는 색인 번호 15를 출력한다.</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>현재 입력(w)</th>\n<th>다음 글자(c)</th>\n<th>출력</th>\n<th>사전 추가(w+c)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>K</td>\n<td>A</td>\n<td>11</td>\n<td>27: KA</td>\n</tr>\n<tr>\n<td>A</td>\n<td>K</td>\n<td>1</td>\n<td>28: AK</td>\n</tr>\n<tr>\n<td>KA</td>\n<td>O</td>\n<td>27</td>\n<td>29: KAO</td>\n</tr>\n<tr>\n<td>O</td>\n<td></td>\n<td>15</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>이 과정을 거쳐 다섯 글자의 문장 KAKAO가 4개의 색인 번호 [11, 1, 27, 15]로 압축된다.</p>\n<p>입력으로 TOBEORNOTTOBEORTOBEORNOT가 들어오면 다음과 같이 압축이 진행된다.</p>\n<table>\n<thead>\n<tr>\n<th>현재 입력(w)</th>\n<th>다음 글자(c)</th>\n<th>출력</th>\n<th>사전 추가(w+c)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>T</td>\n<td>O</td>\n<td>20</td>\n<td></td>\n</tr>\n<tr>\n<td>O</td>\n<td>B</td>\n<td>15</td>\n<td></td>\n</tr>\n<tr>\n<td>B</td>\n<td>E</td>\n<td>2</td>\n<td>29: BE</td>\n</tr>\n<tr>\n<td>E</td>\n<td>O</td>\n<td>5</td>\n<td>30: EO</td>\n</tr>\n<tr>\n<td>O</td>\n<td>R</td>\n<td>15</td>\n<td></td>\n</tr>\n<tr>\n<td>R</td>\n<td>N</td>\n<td>18</td>\n<td></td>\n</tr>\n<tr>\n<td>N</td>\n<td>O</td>\n<td>14</td>\n<td></td>\n</tr>\n<tr>\n<td>O</td>\n<td>T</td>\n<td>15</td>\n<td></td>\n</tr>\n<tr>\n<td>T</td>\n<td>T</td>\n<td>20</td>\n<td></td>\n</tr>\n<tr>\n<td>TO</td>\n<td>B</td>\n<td>27</td>\n<td></td>\n</tr>\n<tr>\n<td>BE</td>\n<td>O</td>\n<td>29</td>\n<td></td>\n</tr>\n<tr>\n<td>OR</td>\n<td>T</td>\n<td>31</td>\n<td></td>\n</tr>\n<tr>\n<td>TOB</td>\n<td>E</td>\n<td>36</td>\n<td></td>\n</tr>\n<tr>\n<td>EO</td>\n<td>R</td>\n<td>30</td>\n<td></td>\n</tr>\n<tr>\n<td>RN</td>\n<td>O</td>\n<td>32</td>\n<td></td>\n</tr>\n<tr>\n<td>OT</td>\n<td></td>\n<td>34</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>입력 형식</em></strong>\n입력으로 영문 대문자로만 이뤄진 문자열 msg가 주어진다. msg의 길이는 1 글자 이상, 1000 글자 이하이다.</p>\n<p><strong><em>출력 형식</em></strong>\n주어진 문자열을 압축한 후의 사전 색인 번호를 배열로 출력하라.</p>\n<p><strong><em>입출력 예제</em></strong></p>\n<table>\n<thead>\n<tr>\n<th>msg</th>\n<th>answer</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>KAKAO</td>\n<td>[11, 1, 27, 15]</td>\n</tr>\n<tr>\n<td>TOBEORNOTTOBEORTOBEORNOT</td>\n<td>[20, 15, 2, 5, 15, 18, 14, 15, 20, 27, 29, 31, 36, 30, 32, 34]</td>\n</tr>\n<tr>\n<td>ABABABABABABABAB</td>\n<td>[1, 2, 27, 29, 28, 31, 30]</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h2>문제풀이</h2>\n<p>솔직히 문제만 보고는 엄청어렵겠구나.. 했지만(<del>쫄았지만</del>),<br>\n천천히 보고서 푸니까 그래도 풀만한 수준이였다.<br>\n현재 문자열에 다음 문자열을 합치고 그것이 dict에 있으면 또 다음 문자열을 붙이는 방식으로 풀면 쉽게 풀린다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> answer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> w <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> msg<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  msg <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>msg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  msg<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">,</span> val</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">[</span>val <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> w <span class=\"token operator\">+</span> msg<span class=\"token punctuation\">[</span>val <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dict<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        w <span class=\"token operator\">+=</span> msg<span class=\"token punctuation\">[</span>val <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        dict<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        answer<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>dict<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> el <span class=\"token operator\">===</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        w <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">[</span>val <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      answer<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>dict<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> el <span class=\"token operator\">===</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>아쉬운 점 || 느낀 점</h3>\n<p>확실히 실제 코테 문제들은 문제부터 읽는데 시간도 걸리고 까다로운 것 같다.<br>\n문제를 잘 읽고 파악하는 연습도 필요할 것 같음.<br>\n그리고 채점을 했을 때 한번에 통과하는 것 또한 중요!</p>","frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 압축","date":"2020년 05월 30일, 22:35"}}},"pageContext":{"slug":"/3/post28/","previous":{"fields":{"slug":"/3/post27/"},"frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 방금그곡","path":"/posts/27"}},"next":{"fields":{"slug":"/3/post29/"},"frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 파일명정렬","path":"/posts/29"}}}},"staticQueryHashes":["1791144535","3649515864"]}