{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/posts/96/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<h2>별자리 만들기</h2>\n<h3>문제 설명</h3>\n<p>도현이는 우주의 신이다. 이제 도현이는 아무렇게나 널브러져 있는 n개의 별들을 이어서 별자리를 하나 만들 것이다. 별자리의 조건은 다음과 같다.</p>\n<ul>\n<li>별자리를 이루는 선은 서로 다른 두 별을 일직선으로 이은 형태이다.</li>\n<li>모든 별들은 별자리 위의 선을 통해 서로 직/간접적으로 이어져 있어야 한다.\n별들이 2차원 평면 위에 놓여 있다. 선을 하나 이을 때마다 두 별 사이의 거리만큼의 비용이 든다고 할 때, 별자리를 만드는 최소 비용을 구하시오.</li>\n</ul>\n<p><strong><em>입력</em></strong></p>\n<p>첫째 줄에 별의 개수 n이 주어진다. (1 ≤ n ≤ 100)</p>\n<p>둘째 줄부터 n개의 줄에 걸쳐 각 별의 x, y좌표가 실수 형태로 주어지며, 최대 소수점 둘째자리까지 주어진다. 좌표는 1000을 넘지 않는 양의 실수이다.</p>\n<p><strong><em>출력</em></strong></p>\n<p>첫째 줄에 정답을 출력한다. 절대/상대 오차는 10-2까지 허용한다.</p>\n</blockquote>\n<h3>문제 풀이</h3>\n<ol>\n<li>각 별에서 다른 별까지의 간선을 모두 구한다.</li>\n<li>구한 모든 간선들을 정렬한다.(오름차순).</li>\n<li>정렬된 간선들로 크루스칼 알고리즘을 사용.(union-find).</li>\n</ol>\n<pre><code class=\"language-js\">const fs = require(\"fs\");\nconst input = fs.readFileSync(\"/dev/stdin\").toString().trim().split(\"\\n\");\n// const input = fs.readFileSync(\"./stdin\").toString().trim().split(\"\\n\");\n\nconst getDistance = (startLocation, endLocation) => {\n  const [startX, startY] = startLocation;\n  const [endX, endY] = endLocation;\n  return Math.sqrt(Math.pow(startY - endY, 2) + Math.pow(startX - endX, 2));\n};\nconst float = parseFloat;\n\nconst starCount = +input[0];\nconst visited = Array.from(Array(starCount), (v, i) => i);\nconst checked = Array(starCount).fill(false);\nconst star = {};\ninput.slice(1).forEach((startLocation, idx) => {\n  const [x, y] = startLocation.split(\" \");\n  star[idx] = [float(x), float(y)];\n});\n\nconst find = star => {\n  if (visited[star] === star) return star;\n  return find(visited[star]);\n};\n\nconst edge = [];\n\nconst findEdge = start => {\n  checked[start] = true;\n  for (const key in star) {\n    if (key === start) continue;\n    if (checked[key]) continue;\n    const cost = getDistance(star[start], star[key]);\n    edge.push([start, key, cost]);\n  }\n};\n\nfor (const key in star) {\n  findEdge(key);\n}\nedge.sort((a, b) => a[2] - b[2]);\n\nlet answer = 0;\n\nfor (let i = 0; i &#x3C; edge.length; i++) {\n  const [start, end, cost] = edge[i];\n  if (find(start) === find(end)) continue;\n  visited[find(end)] = find(start);\n  answer += cost;\n}\n\nconsole.log(answer);\n</code></pre>","frontmatter":{"title":"[백준] 4386번 별자리만들기","date":"2020년 08월 25일, 21:08"}}},"pageContext":{"slug":"/10/post96/","previous":{"fields":{"slug":"/10/post95/"},"frontmatter":{"title":"[프로그래머스] 레벨4 (level4) 지형이동","path":"/posts/95"}},"next":{"fields":{"slug":"/10/post97/"},"frontmatter":{"title":"[백준] 1920번 수 찾기","path":"/posts/97"}}}},"staticQueryHashes":["3649515864"],"slicesMap":{}}