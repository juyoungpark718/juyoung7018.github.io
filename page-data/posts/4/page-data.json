{"componentChunkName":"component---src-templates-blog-template-js","path":"/posts/4","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<h2>올바른 괄호</h2>\n<h3>문제 설명</h3>\n<p>괄호가 바르게 짝지어졌다는 것은 '(' 문자로 열렸으면 반드시 짝지어서 ')' 문자로 닫혀야 한다는 뜻입니다. 예를 들어,</p>\n<ul>\n<li>\"()()\" 또는 \"(())()\" 는 올바른 괄호입니다.</li>\n<li>\")()(\" 또는 \"(()(\" 는 올바르지 않은 괄호입니다.</li>\n</ul>\n<p>'(' 또는 ')' 로만 이루어진 문자열 s가 주어졌을 때, 문자열 s가 올바른 괄호이면 true를 return 하고, 올바르지 않은 괄호이면 false를 return 하는 solution 함수를 완성해 주세요.</p>\n<p><strong><em>제한사항</em></strong></p>\n<ul>\n<li>문자열 s의 길이 : 100,000 이하의 자연수</li>\n<li>문자열 s는 '(' 또는 ')' 로만 이루어져 있습니다.  </li>\n</ul>\n<p><strong><em>입출력 예</em></strong></p>\n<table>\n<thead>\n<tr>\n<th>s</th>\n<th>answer</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\"()()\"</td>\n<td>true</td>\n</tr>\n<tr>\n<td>\"(())()\"</td>\n<td>true</td>\n</tr>\n<tr>\n<td>\")()(\"</td>\n<td>false</td>\n</tr>\n<tr>\n<td>\"(()(\"</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<hr>\n</blockquote>\n<h2>문제 풀이</h2>\n<p>스택을 활용하면 쉽게 풀리는 문제였다. 스택에 문자열 s의 원소를 하나씩 푸시하면서, 스택의 맨 위의 원소와 s의 인덱스가 \"()\"를 만족하면 스택에서 \"(\"을 pop해서 빼주면 된다.</p>\n<ol>\n<li>s에 대해 for문을 돌린다.</li>\n<li>\n<p><strong><em>stack의 길이가 0</em></strong>이면,</p>\n<ol>\n<li>s의 원소를 push 후 continue.</li>\n</ol>\n</li>\n<li>\n<p><strong><em>stack의 길이가 0</em></strong>이 아니라면,</p>\n<ol>\n<li>\n<p>stack의 <span style=\"color:#D92463\">stack.length - 1 원소</span>와 <span style=\"color:#248BD9\">s의 원소</span>가 <span style=\"color:#D92463\">\"(\"</span>,<span style=\"color:#248BD9\">\")\"</span>인지 확인.</p>\n<ol>\n<li>각 원소가 \"(\",\")\"이면 <strong><em>stack의 stack.length-1을 pop.</em></strong></li>\n<li>아니라면, <strong><em>s의 원소를 push.</em></strong></li>\n</ol>\n</li>\n</ol>\n</li>\n<li>stack의 길이가 0이면 올바른 괄호, 아니면 올바르지 않은 괄호.</li>\n</ol>\n<p><strong>완성 코드</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> answer <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>s<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">[</span>stack<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>아쉬운 점 &#x26; 느낀 점</h3>\n<p>level2 문제들은 대부분 코드가 길지 않다. 각 알고리즘 &#x26; 자료구조를 정확이 알고 있다면, 무난하게 풀 수 있는 문제들이 많다. 하지만, 자신에게 익숙하지 않은 알고리즘이나 자료구조면은 정말 어렵게 느껴진다. 이 문제 전에 2020 카카오 블라인드 채용 문제 중에 괄호 변환 문제를 풀어서 더 쉽게 풀었던 것 같다.</p>","frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 올바른 괄호","date":"2020년 05월 14일, 10:00"}}},"pageContext":{"slug":"/1/post4/","previous":{"fields":{"slug":"/1/post3/"},"frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 가장 큰 정사각형","path":"/posts/3"}},"next":{"fields":{"slug":"/1/post5/"},"frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 다음 큰 숫자","path":"/posts/5"}}}}}