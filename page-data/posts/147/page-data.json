{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/posts/147/","result":{"data":{"markdownRemark":{"html":"<h2>TDZ(Temporal Dead Zone)</h2>\n<ul>\n<li>일시적인 사각지대</li>\n<li>변수가 선언되기 전에 접근을 막음</li>\n</ul>\n<pre><code class=\"language-js\">console.log(pi); // Reference Error(Temporal Dead Zone)\nconst pi = 3.14; // Declaration &#x26; Initialization\nconsole.log(pi); // 3.14;\n</code></pre>\n<br />\n<h2>TDZ에 영향을 받는 구문</h2>\n<h3>const &#x26; let</h3>\n<pre><code class=\"language-js\">// 작동 안함!\n\npi; // Reference error\nconst pi = 3.14;\n\nfoo // Reference error\nlet foo = 'hi';\n</code></pre>\n<br />\n<h3>class</h3>\n<pre><code class=\"language-js\">// 작동 안함!\nconst person = new Person(\"yongda\"); // Reference error\nclass Person{\n  constructor(name){\n    this.name = name;\n  }\n}\n</code></pre>\n<br />\n<h3>contructor() 내부의 super()</h3>\n<pre><code class=\"language-js\">class Person{\n  constructor(name){\n    this.name = name;\n  }\n}\n\nclass Student extends Person{\n  constructor(name, id){\n    this.id = id;\n    super(name);\n  }\n}\n// 작동 안함!\nconst student = new Student('yongda', '1'); // Reference error\n</code></pre>\n<p>기본 함수 매개변수(Default Function Parameter)\n기본 매개변수는 글로벌과 함수 스코프 사이의 중간 스코프(intermidiate scope)에 위치. 기본 매개변수 또한 TDZ 제한이 있다.</p>\n<pre><code class=\"language-js\">const a = 2;\nfunction square(a = a){\n  return a * a;\n}\n// 작동 안함!\nsquare(); // Reference error\n</code></pre>\n<p>기본 매개변수 a는 선언 전에 a = a 표현식의 오른쪽에서 사용되었다. a에서 참조 에러가 발생.\n기본 매개변수는 선언 및 초기화 다음에 사용되어야 한다. 이 경우 init과 같은 다른 변수로 선언하여 시용.</p>\n<pre><code class=\"language-js\">const init = 2;\nfunction square(a = init){\n  return a * a;\n}\n// 작동!\nsquare(); // => 4\n</code></pre>\n<br />\n<h2>var, function, import 구문</h2>\n<p>위의 구문들과 반대로 <strong>var</strong>, <strong>function</strong> 선언은 TDZ에 영향을 받지 않는다. 현재 스코프에서 호이스팅 된다.</p>\n<h4>var</h4>\n<p>var 변수는 선언 전에 접근하면 undefined</p>\n<pre><code class=\"language-js\">\nvalue // undefined;\nvar value;\n</code></pre>\n<br />\n<h4>function</h4>\n<p>함수는 선언된 위치와 상관없이 동일하게 호출</p>\n<pre><code class=\"language-js\">//작동!\ngreet('World');\nfunction greet(who){\n  return `Hello, ${who}!`;\n}\n//작동!\ngreet('World');\n</code></pre>\n<h4>import</h4>\n<p>import 모듈도 hoisting이 된다.</p>\n<pre><code class=\"language-js\">// 작동!\nmyFunction();\nimport { myFuncton } from \"./myModule\";\n</code></pre>\n<p>import 구문이 호이스팅 되기 때문에, 자바스크립트 파일 시작 부분에서 디펜던시 모듈을 가져오는 것이 좋다고 되어있는데,<br>\n개인적인 생각으로는 헷갈릴 수 있기 때문이지 않을까라고 생각한다.</p>\n<h2>TDZ에서 typeof 연산자의 동작</h2>\n<p><strong>typeof</strong> 연산자는 변수가 현재 스코프 안에 선언되었는지 확인할 때 유용하다.</p>\n<p>예를 들면, <strong>notDefined</strong> 변수는 선언되지 않았다. 이 변수에 <strong>typeof</strong> 연산자를 적용하면 에러가 발생한다.</p>\n<pre><code class=\"language-js\">typeof notDefined; // => 'undefined'\n</code></pre>\n<p>변수가 선언되지 않았기 때문에, <strong>typeof notDefiend</strong>는 <strong>undefined</strong>로 평가<br>\n그러나 TDZ의 변수에서는 typeof는 reference error를 발생시킨다.</p>\n<pre><code class=\"language-js\">typeof variable; // throws 'ReferenceError'\nlet variable;\n</code></pre>\n<h2>현재 스코프 안에서 TDZ 동작</h2>\n<p>TDZ은 선언문이 존재하는 스코프 범위 안에서 변수에 영향을 준다.</p>\n<pre><code class=\"language-js\">if(something){ // Outer block scope\n  if(somethingElse){ // Inner block scope\n    pi; // Temporal Dead Zone\n    const pi = 3.14;\n  }\n}\n</code></pre>\n<h2>참고</h2>\n<ul>\n<li><a href=\"https://ui.toast.com/weekly-pick/ko_20191014\">TDZ을 모른 채 자바스크립트 변수를 사용하지 말라, TOAST UI</a></li>\n<li><a href=\"https://dmitripavlutin.com/javascript-variables-and-temporal-dead-zone/\">원문</a></li>\n</ul>","frontmatter":{"title":"[아티클럽] 자바스크립트 TDZ","date":"2021년 06월 07일, 02:00"}}},"pageContext":{"slug":"/15/post147/","previous":{"fields":{"slug":"/15/post146/"},"frontmatter":{"title":"[Storybooy] Storybook(react) 튜토리얼","path":"/posts/146"}},"next":{"fields":{"slug":"/15/post148/"},"frontmatter":{"title":"[백준] 9935번 문자열 폭발","path":"/posts/148"}}}},"staticQueryHashes":["3649515864"],"slicesMap":{}}