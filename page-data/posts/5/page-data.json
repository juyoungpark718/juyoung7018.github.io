{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/posts/5/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<h2>다음 큰 숫자</h2>\n<h3>문제 설명</h3>\n<p>자연수 n이 주어졌을 때, n의 다음 큰 숫자는 다음과 같이 정의 합니다.</p>\n<ul>\n<li>조건 1. n의 다음 큰 숫자는 n보다 큰 자연수 입니다.</li>\n<li>조건 2. n의 다음 큰 숫자와 n은 2진수로 변환했을 때 1의 갯수가 같습니다.</li>\n<li>조건 3. n의 다음 큰 숫자는 조건 1, 2를 만족하는 수 중 가장 작은 수 입니다.\n예를 들어서 78(1001110)의 다음 큰 숫자는 83(1010011)입니다.\n자연수 n이 매개변수로 주어질 때, n의 다음 큰 숫자를 return 하는 solution 함수를 완성해주세요.</li>\n</ul>\n<p><strong><em>제한사항</em></strong></p>\n<ul>\n<li>n은 1,000,000 이하의 자연수 입니다.</li>\n</ul>\n<p><strong><em>입출력 예</em></strong></p>\n<table>\n<thead>\n<tr>\n<th>n</th>\n<th>result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>78</td>\n<td>83</td>\n</tr>\n<tr>\n<td>15</td>\n<td>23</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h2>처음 생각</h2>\n<p>이진수는 자주 쓰지 않는 숫자다보니 항상 처음 접하게 되면 당황하게 된다.\n처음에는 이리저리 막 생각해봤다. shift를 사용해서 풀어보는 방법도 생각했지만, 컴퓨터 언어를 배우면서 shift를 거의 사용해본 적이 없어서, 이 방법도 난감했다. 그래서 그 후에 떠오른 생각은 <strong>현재 숫자+1에서부터 그냥 모든 숫자를 다 찾는 방법</strong>이였다.</p>\n<h2>문제 풀이</h2>\n<p>사실 모든 숫자를 다 비교한다고 생각하면 어렵지 않은 문제이다.\nFor문 하나를 돌리면서 이진수로 바꾼뒤 1의 갯수를 조사하면 된다.</p>\n<p><strong>완성 코드</strong></p>\n<pre><code class=\"language-js\">function solution(n) {\n  var answer = 0;\n  let binaryCount = findDup(n.toString(2));\n  for (let i = n + 1; i &#x3C; 10000000; i++) {\n    let tempCount = findDup(i.toString(2));\n    if (tempCount === binaryCount) {\n      answer = i;\n      break;\n    }\n  }\n\n  return answer;\n}\n\nfunction findDup(number) {\n  let count = number.match(/1/g).length;\n  return count;\n}\n</code></pre>\n<h3>아쉬운 점 &#x26; 느낀 점</h3>\n<p>여기서, 다른 사람의 풀이를 보고 match 함수를 이용했는데, 정규식 표현에 대해서 정확한 이해가 없어서 사실 항상 match를 사용하는 것을 꺼려했는데, 이 문제를 풀면서 만약에 직접 함수를 구현하기 힘들 때가 있다면(<del>물론 이 문제에서는 1에 대한 count만 세주면 되기 때문에 간단..</del>), 정규식을 알고 match를 사용하는게 시간 절약에 도움이 된다고 느꼈다. <strong>코딩 테스트에는 필연적으로 제한 시간</strong>이 있고, <strong>미리 구현된 내부 라이브러리를 쓸 수 있다면 알아두고 연습</strong>해 두는게 고득점을 맞을 수 있다고 느꼈다.</p>","frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 다음 큰 숫자","date":"2020년 05월 15일, 10:00"}}},"pageContext":{"slug":"/1/post5/","previous":{"fields":{"slug":"/1/post4/"},"frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 올바른 괄호","path":"/posts/4"}},"next":{"fields":{"slug":"/1/post6/"},"frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 땅따먹기","path":"/posts/6"}}}},"staticQueryHashes":["3649515864"],"slicesMap":{}}