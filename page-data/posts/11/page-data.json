{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/posts/11/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<h2>최솟값과 최댓값</h2>\n<h3>문제 설명</h3>\n<p>문자열 s에는 공백으로 구분된 숫자들이 저장되어 있습니다. str에 나타나는 숫자 중 최소값과 최대값을 찾아 이를 (최소값) (최대값)형태의 문자열을 반환하는 함수, solution을 완성하세요.\n예를들어 s가 \"1 2 3 4\"라면 \"1 4\"를 리턴하고, \"-1 -2 -3 -4\"라면 \"-4 -1\"을 리턴하면 됩니다.</p>\n<p><strong><em>제한 조건</em></strong></p>\n<ul>\n<li>s에는 둘 이상의 정수가 공백으로 구분되어 있습니다.</li>\n</ul>\n<p><strong><em>입출력 예</em></strong></p>\n<table>\n<thead>\n<tr>\n<th>s</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\"1 2 3 4 \"</td>\n<td>\"1 4\"</td>\n</tr>\n<tr>\n<td>\"-1 -2 -3 -4 \"</td>\n<td>\"-4 -1\"</td>\n</tr>\n<tr>\n<td>\"-1 -1\"</td>\n<td>\"-1 -1\"</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h2>문제 풀이</h2>\n<p>주어진 문자열을 split함수를 이용해서 배열로 만들고,<br>\n배열을 오름차 혹은 내림차 순으로 sort()해준 다음에 최댓값과 최솟값을 구하면 됨.(코드는 오름차순)</p>\n<h5>소스코드</h5>\n<pre><code class=\"language-js\">function solution(s) {\n  var answer = \"\";\n  let arr = s.split(\" \");\n  arr.sort((a, b) => a - b);\n  answer = arr[0] + \" \" + arr[arr.length - 1];\n  return answer;\n}\n</code></pre>\n<hr>\n<blockquote>\n<h2>최솟값 만들기</h2>\n<h3>문제 설명</h3>\n<p>길이가 같은 배열 A, B 두개가 있습니다. 각 배열은 자연수로 이루어져 있습니다.\n배열 A, B에서 각각 한 개의 숫자를 뽑아 두 수를 곱합니다. 이러한 과정을 배열의 길이만큼 반복하며, 두 수를 곱한 값을 누적하여 더합니다. 이때 최종적으로 누적된 값이 최소가 되도록 만드는 것이 목표입니다. (단, 각 배열에서 k번째 숫자를 뽑았다면 다음에 k번째 숫자는 다시 뽑을 수 없습니다.)\n예를 들어 A = [1, 4, 2] , B = [5, 4, 4] 라면</p>\n<ul>\n<li>A에서 첫번째 숫자인 1, B에서 두번째 숫자인 5를 뽑아 곱하여 더합니다. (누적된 값 : 0 + 5(1x5) = 5)</li>\n<li>A에서 두번째 숫자인 4, B에서 세번째 숫자인 4를 뽑아 곱하여 더합니다. (누적된 값 : 5 + 16(4x4) = 21)</li>\n<li>A에서 세번째 숫자인 2, B에서 첫번째 숫자인 4를 뽑아 곱하여 더합니다. (누적된 값 : 21 + 8(2x4) = 29)\n즉, 이 경우가 최소가 되므로 29를 return 합니다.\n배열 A, B가 주어질 때 최종적으로 누적된 최솟값을 return 하는 solution 함수를 완성해 주세요.</li>\n</ul>\n<p><strong><em>제한사항</em></strong></p>\n<ul>\n<li>배열 A, B의 크기 : 1,000 이하의 자연수</li>\n<li>배열 A, B의 원소의 크기 : 1,000 이하의 자연수</li>\n</ul>\n<p><strong><em>입출력 예</em></strong></p>\n<table>\n<thead>\n<tr>\n<th>A</th>\n<th>B</th>\n<th>answer</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[1, 4, 2]</td>\n<td>[5, 4, 4]</td>\n<td>29</td>\n</tr>\n<tr>\n<td>[1, 2]</td>\n<td>[3, 4]</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h2>문제설명</h2>\n<p>주어진 배열에서 서로 배열의 원소 하나씩 곱해서(중복 선택 불가) 총합이 최솟값이면 된다.<br>\n그래서 한 배열은 오름차순으로 정렬하고, 한 배열은 내림차 순으로 정렬해서,<br>\n최솟값 * 최대값으로 수를 더해주면 된다.</p>\n<pre><code class=\"language-js\">function solution(A, B) {\n  var answer = 0;\n\n  A.sort((a, b) => a - b);\n  B.sort((a, b) => b - a);\n\n  A.map((e, idx) => {\n    answer += A[idx] * B[idx];\n  });\n\n  return answer;\n}\n</code></pre>\n<h3>문제 풀고 든 생각</h3>\n<p>프로그래머스 레벨2는 진짜 애매한 위치에 있는 것 같다.<br>\n이번 문제들 처럼 엄청 쉬운 문제도 있고, 생각을 해도 못푸는 문제들도 있고..</p>","frontmatter":{"title":"[프로그래머스]레벨2(level2)최솟값과 최댓값/최솟값 만들기","date":"2020년 05월 19일, 09:43"}}},"pageContext":{"slug":"/2/post11/","previous":{"fields":{"slug":"/1/post10/"},"frontmatter":{"title":"[자바스크립트]숫자 야구 게임 만들기","path":"/posts/10"}},"next":{"fields":{"slug":"/2/post12/"},"frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 피보나치 수","path":"/posts/12"}}}},"staticQueryHashes":["3649515864"],"slicesMap":{}}