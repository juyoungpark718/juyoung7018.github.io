{"componentChunkName":"component---src-templates-blog-template-js","path":"/posts/102","result":{"data":{"markdownRemark":{"html":"<p>자바스크립트에는 8가지의 자료형이 있음</p>\n<ul>\n<li>원시형(Primitive type)\n<ul>\n<li>객체가 아니면서 메서드도 가지지 않는 데이터</li>\n<li>종류\n<ul>\n<li><code class=\"language-text\">Number</code></li>\n<li><code class=\"language-text\">BigInt</code></li>\n<li><code class=\"language-text\">String</code></li>\n<li><code class=\"language-text\">Symbol</code></li>\n<li><code class=\"language-text\">undefined</code></li>\n<li><code class=\"language-text\">Boolean</code></li>\n<li><code class=\"language-text\">null</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">Object</code> 까지 해서 8가지.</li>\n</ul>\n<p>객체형은 원시형과 달리 다양한 데이터를 담을 수 있음.</p>\n<ul>\n<li><code class=\"language-text\">in</code> 을 통해서 객체 안에  property 존재 여부를 확인 가능.</li>\n<li><code class=\"language-text\">for ... in</code> 을 통해 객체의 모든 키를 순회 할 수 있음.</li>\n</ul>\n<h3>객체의 정렬 방식</h3>\n<p><code class=\"language-text\">for ... in</code> 을 사용하는 경우 순서 정렬은</p>\n<ul>\n<li><code class=\"language-text\">정수 프로퍼티</code>는 <code class=\"language-text\">자동 정렬</code></li>\n<li>그 외 프로퍼티는 <code class=\"language-text\">객체에 추가한 순서</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"4\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span>\n    korea<span class=\"token operator\">:</span><span class=\"token string\">\"kimchi\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"3\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"2\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 실행 결과</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// 4</span>\n<span class=\"token comment\">// korea</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>참조에 의한 복사</h3>\n<p>객체형은 변수에 저장될 때 원시형과는 다르다.</p>\n<p><code class=\"language-text\">원시형</code>은 <code class=\"language-text\">값 그대로</code> 저장, 할당, 복사가 이루어지지만,</p>\n<p><code class=\"language-text\">객체형</code>은 <code class=\"language-text\">메모리 주소인 참조 값</code>이 저장, 할당, 복사가 이루어진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> korean<span class=\"token operator\">:</span><span class=\"token string\">\"안녕\"</span><span class=\"token punctuation\">,</span> english<span class=\"token operator\">:</span> <span class=\"token string\">\"hi\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">===</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">===</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>따라서, 객체를 복사 하려면</p>\n<ul>\n<li><code class=\"language-text\">for ... in</code> 을 통해 새롭게 선언된 객체에 값을 저장해주는 방법</li>\n<li><code class=\"language-text\">Object.assign(target, src1, src2 ...)</code> 의 방식으로 해주는 방법이 있다.</li>\n</ul>\n<p>❗ 객체 안에 객체가 있는 경우에는 어떻게 해야할까? → 안에 있는 객체도 Object.assign으로 풀어줘야한다 혹은 라이브러리를 통해 복사를 해야할 수 밖에 없다.</p>\n<h3>메소드와 this</h3>\n<p>객체 프로퍼티에 할당된 함수를 메소드라고 부른다.</p>\n<p>메소드에서는 this를 이용해서 객체에 접근이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token operator\">:</span><span class=\"token string\">\"jyp\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>this는 객체로 실행 시키는 경우에는 this가 객체 본인을 따라간다.(위의 예제의 경우)</p>\n<p>하지만, 그렇지 않다면 this는 엄격모드인 경우 undefined, 엄격모드가 아닌 경우는 window 전역 객체를 참조한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token string\">'use strict'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 엄격 모드인 경우 undefined</span>\n\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span><span class=\"token string\">\"jyp\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">getThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>getThis<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 객체의 함수를 받아서 변수에 할당해서 사용하는 경우도 this를 알 수 없음</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>이렇게 <code class=\"language-text\">this</code>는 런타임에 결정된다.</p>\n<h3>화살표 함수에서의 this</h3>\n<p>화살표 함수는 일반 함수와 달리 고유한 this를 가지지 않는다.</p>\n<p>그래서 화살표 함수에서 this를 참조하면 화살표 함수가 아닌 외부 함수에서 this값을 가져온다.</p>\n<h3>new 연산자와 생성자 함수</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jyp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>생성자 함수의 첫 글자는 대문자</li>\n<li>new 키워드를 이용해 객체 생성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jyp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>new 키워드를 생략할 수 있는 방법이다. 하지만 정말 필요한 경우가 아니라면 굳이 생략할 필요는 없다.</li>\n</ul>\n<h3>옵셔널 체이닝</h3>\n<p>최근에 추가된 기능으로 <code class=\"language-text\">객체의 프로퍼티</code>가 <code class=\"language-text\">undefiend 또는 null인 경우</code> 평가를 멈추고 undefiend를 반환</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 주소 정보가 없는 사용자</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> user<span class=\"token operator\">?.</span>address<span class=\"token operator\">?.</span>street <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined, 에러가 발생하지 않음</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>하지만 이 기능은 es2020부터 지원되는 기능으로 아직 실험적인(?) 기능이다.</p>\n<h3>객체의 형변환</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n  money<span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>toPrimitive<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>hint<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hint: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>hint<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> hint <span class=\"token operator\">==</span> <span class=\"token string\">\"string\"</span> <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">{name: \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"}</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>money<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 데모:</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hint: string -> {name: \"John\"}</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hint: number -> 1000</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">+</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hint: default -> 1500</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>자바스크립트는 형 변환이 필요할 때, 아래와 같은 알고리즘에 따라 원하는 메서드를 찾고 호출합니다.</strong></p>\n<ol>\n<li>객체에 <code class=\"language-text\">obj[Symbol.toPrimitive](hint)</code>메서드가 있는지 찾고, 있다면 메서드를 호출합니다. <code class=\"language-text\">Symbol.toPrimitive</code>는 시스템 심볼로, 심볼형 키로 사용됩니다.</li>\n<li>1에 해당하지 않고 hint가 <code class=\"language-text\">&quot;string&quot;</code>이라면,\n<ul>\n<li><code class=\"language-text\">obj.toString()</code>이나 <code class=\"language-text\">obj.valueOf()</code>를 호출합니다(존재하는 메서드만 실행됨).</li>\n</ul>\n</li>\n<li>1과 2에 해당하지 않고, hint가 <code class=\"language-text\">&quot;number&quot;</code>나 <code class=\"language-text\">&quot;default&quot;</code>라면\n<ul>\n<li>\n<p><code class=\"language-text\">obj.valueOf()</code>나 <code class=\"language-text\">obj.toString()</code>을 호출합니다(존재하는 메서드만 실행됨).</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3>참고</h3>\n<p><a href=\"https://ko.javascript.info/object-methods\">https://ko.javascript.info/object-methods</a></p>","frontmatter":{"title":"[자바스크립트] 객체","date":"2020년 10월 26일, 23:15"}}},"pageContext":{"slug":"/11/post102/","previous":{"fields":{"slug":"/11/post101/"},"frontmatter":{"title":"[자바스크립트] 형변환 & 연산자","path":"/posts/101"}},"next":{"fields":{"slug":"/11/post103/"},"frontmatter":{"title":"[자바스크립트] 자료형에 대한 메소드","path":"/posts/103"}}}}}