{"componentChunkName":"component---src-templates-blog-template-js","path":"/posts/29","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<h2>파일명 정렬</h2>\n<h3>문제 설명</h3>\n<p>세 차례의 코딩 테스트와 두 차례의 면접이라는 기나긴 블라인드 공채를 무사히 통과해 카카오에 입사한 무지는 파일 저장소 서버 관리를 맡게 되었다.</p>\n<p>저장소 서버에는 프로그램의 과거 버전을 모두 담고 있어, 이름 순으로 정렬된 파일 목록은 보기가 불편했다. 파일을 이름 순으로 정렬하면 나중에 만들어진 ver-10.zip이 ver-9.zip보다 먼저 표시되기 때문이다.</p>\n<p>버전 번호 외에도 숫자가 포함된 파일 목록은 여러 면에서 관리하기 불편했다. 예컨대 파일 목록이 [img12.png, img10.png, img2.png, img1.png]일 경우, 일반적인 정렬은 [img1.png, img10.png, img12.png, img2.png] 순이 되지만, 숫자 순으로 정렬된 [img1.png, img2.png, img10.png, img12.png\"] 순이 훨씬 자연스럽다.</p>\n<p>무지는 단순한 문자 코드 순이 아닌, 파일명에 포함된 숫자를 반영한 정렬 기능을 저장소 관리 프로그램에 구현하기로 했다.</p>\n<p>소스 파일 저장소에 저장된 파일명은 100 글자 이내로, 영문 대소문자, 숫자, 공백(\" ), 마침표(.), 빼기 부호(-\")만으로 이루어져 있다. 파일명은 영문자로 시작하며, 숫자를 하나 이상 포함하고 있다.</p>\n<p>파일명은 크게 HEAD, NUMBER, TAIL의 세 부분으로 구성된다.</p>\n<ul>\n<li>HEAD는 숫자가 아닌 문자로 이루어져 있으며, 최소한 한 글자 이상이다.</li>\n<li>NUMBER는 한 글자에서 최대 다섯 글자 사이의 연속된 숫자로 이루어져 있으며, 앞쪽에 0이 올 수 있다. 0부터 99999 사이의 숫자로, 00000이나 0101 등도 가능하다.</li>\n<li>TAIL은 그 나머지 부분으로, 여기에는 숫자가 다시 나타날 수도 있으며, 아무 글자도 없을 수 있다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>파일명</th>\n<th>HEAD</th>\n<th>NUMBER</th>\n<th>TAIL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>foo9.txt</td>\n<td>foo</td>\n<td>9</td>\n<td>.txt</td>\n</tr>\n<tr>\n<td>foo010bar020.zip</td>\n<td>foo</td>\n<td>010</td>\n<td>bar020.zip</td>\n</tr>\n<tr>\n<td>F-15</td>\n<td>F-</td>\n<td>15</td>\n<td>(빈 문자열)</td>\n</tr>\n</tbody>\n</table>\n<p>파일명을 세 부분으로 나눈 후, 다음 기준에 따라 파일명을 정렬한다.</p>\n<p>파일명은 우선 HEAD 부분을 기준으로 사전 순으로 정렬한다. 이때, 문자열 비교 시 대소문자 구분을 하지 않는다. <strong>MUZI</strong>와 <strong>muzi</strong>, <strong>MuZi</strong>는 정렬 시에 같은 순서로 취급된다.\n파일명의 HEAD 부분이 대소문자 차이 외에는 같을 경우, NUMBER의 숫자 순으로 정렬한다. 9 &#x3C; 10 &#x3C; 0011 &#x3C; 012 &#x3C; 13 &#x3C; 014 순으로 정렬된다. 숫자 앞의 0은 무시되며, 012와 12는 정렬 시에 같은 같은 값으로 처리된다.\n두 파일의 HEAD 부분과, NUMBER의 숫자도 같을 경우, 원래 입력에 주어진 순서를 유지한다. <strong>MUZI01.zip</strong>과 <strong>muzi1.png</strong>가 입력으로 들어오면, 정렬 후에도 입력 시 주어진 두 파일의 순서가 바뀌어서는 안 된다.\n무지를 도와 파일명 정렬 프로그램을 구현하라.</p>\n<p><strong><em>입력 형식</em></strong>  </p>\n<p>입력으로 배열 files가 주어진다.</p>\n<ul>\n<li>files는 1000 개 이하의 파일명을 포함하는 문자열 배열이다.</li>\n<li>각 파일명은 100 글자 이하 길이로, 영문 대소문자, 숫자, 공백(\" ), 마침표(.), 빼기 부호(-\")만으로 이루어져 있다. 파일명은 영문자로 시작하며, 숫자를 하나 이상 포함하고 있다.</li>\n<li>중복된 파일명은 없으나, 대소문자나 숫자 앞부분의 0 차이가 있는 경우는 함께 주어질 수 있다. (muzi1.txt, MUZI1.txt, muzi001.txt, muzi1.TXT는 함께 입력으로 주어질 수 있다.)</li>\n</ul>\n<p><strong>출력 형식</strong></p>\n<p>위 기준에 따라 정렬된 배열을 출력한다.</p>\n<p><strong>입출력 예제</strong></p>\n<p>입력: [\"img12.png\", \"img10.png\", \"img02.png\", \"img1.png\", \"IMG01.GIF\", \"img2.JPG\"]\n출력: [\"img1.png\", \"IMG01.GIF\", \"img02.png\", \"img2.JPG\", \"img10.png\", \"img12.png\"]</p>\n<p>입력: [\"F-5 Freedom Fighter\", \"B-50 Superfortress\", \"A-10 Thunderbolt II\", \"F-14 Tomcat\"]\n출력: [\"A-10 Thunderbolt II\", \"B-50 Superfortress\", \"F-5 Freedom Fighter\", \"F-14 Tomcat\"]</p>\n</blockquote>\n<h2>문제풀이</h2>\n<p>진짜 처음에 다 맞는거 같은데 왜 안풀릴까.. 고민하는 와중에 구글링을 해서 해답을 찾았다.(<del>정확한 원인은 잘모름</del>)<br>\n다른 코드와 차이점은 localeCompare 사용 여부였다.<br>\n그냥 문자열을 비교해서 해도 잘 되는거 같아서 그렇게 했지만, 계속 채점결과를 통과하지 못했다.<br>\n하지만, localeCompare을 사용하고는 풀림.<br>\n그리고 sort함수가 stable(안정된?)하지 않기에 index를 추가해서 정렬해줘야했다.  </p>\n<ol>\n<li>\n<p>hash값으로 받은 파일을 {id,head,number,file}이렇게 나눈다.</p>\n<ul>\n<li>split, match 함수를 이용해서 정규식으로 head 와 number을 찾음.</li>\n<li>number의 길이는 5이므로 5까지만 잘라서 사용. => 나중에 편하게 사용하기 위해 parseInt필수.</li>\n</ul>\n</li>\n<li>\n<p>localeCompare를 이용해서 문자열을 비교.</p>\n<ol>\n<li>같으면, 숫자를 비교,</li>\n<li>숫자도 같으면, id(인덱스)값으로 비교.</li>\n<li>숫자가 다르면, 숫자로 정렬. </li>\n<li>다르면, 문자열 대로 정렬.</li>\n</ol>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">files</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> answer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> hashs <span class=\"token operator\">=</span> <span class=\"token function\">makeHashFiles</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  hashs<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> locale <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">localeCompare</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>locale <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>number <span class=\"token operator\">===</span> b<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>id <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>number <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> locale<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  answer <span class=\"token operator\">=</span> hashs<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> e<span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">splitFile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> head <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[0-9]+/g</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> number <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[0-9]+/g</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  number <span class=\"token operator\">=</span> number<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token operator\">?</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> head<span class=\"token punctuation\">,</span> number <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">makeHashFiles</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">files</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> files<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">,</span> id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> id<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token function\">splitFile</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> file<span class=\"token operator\">:</span> e <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>아쉬운 점 || 느낀 점</h4>\n<p>솔직히 다른 사람 풀이를 봤을 때도 뭐가 도대체 내가 틀린지 몰랐다.<br>\n하지만 다른 점이라고는 localeCompare이였는데,<br>\n사실 알고 있던 함수였는데 잘 사용하지 않았는데, 이번 기회로 정확한 차이는 잘 모르겠지만,<br>\n다르다는 것을 알게 되었고, 이 함수를 사용하는 것이 더 좋은 편인거 같으므로 이후에 문제들엔 적용해야겠다.</p>","frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 파일명정렬","date":"2020년 05월 31일, 12:05"}}},"pageContext":{"slug":"/post29/","previous":{"fields":{"slug":"/post28/"},"frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 압축","path":"/posts/28"}},"next":null}}}