{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/posts/70/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<h2>가사 검색</h2>\n<h3>문제 설명</h3>\n<p>[본 문제는 정확성과 효율성 테스트 각각 점수가 있는 문제입니다.]</p>\n<p>친구들로부터 천재 프로그래머로 불리는 프로도는 음악을 하는 친구로부터 자신이 좋아하는 노래 가사에 사용된 단어들 중에 특정 키워드가 몇 개 포함되어 있는지 궁금하니 프로그램으로 개발해 달라는 제안을 받았습니다.<br>\n그 제안 사항 중, 키워드는 와일드카드 문자중 하나인 '?'가 포함된 패턴 형태의 문자열을 뜻합니다. 와일드카드 문자인 '?'는 글자 하나를 의미하며, 어떤 문자에도 매치된다고 가정합니다. 예를 들어 <code>\"fro??\"</code>는 <code>\"frodo\"</code>, <code>\"front\"</code>, <code>\"frost\"</code> 등에 매치되지만 <code>\"frame\"</code>, <code>\"frozen\"</code>에는 매치되지 않습니다.</p>\n<p>가사에 사용된 모든 단어들이 담긴 배열 words와 찾고자 하는 키워드가 담긴 배열 queries가 주어질 때, 각 키워드 별로 매치된 단어가 몇 개인지 순서대로 배열에 담아 > 반환하도록 solution 함수를 완성해 주세요.</p>\n<p><strong><em>가사 단어 제한사항</em></strong></p>\n<ul>\n<li><code>words</code>의 길이(가사 단어의 개수)는 2 이상 100,000 이하입니다.</li>\n<li>각 가사 단어의 길이는 1 이상 10,000 이하로 빈 문자열인 경우는 없습니다.</li>\n<li>전체 가사 단어 길이의 합은 2 이상 1,000,000 이하입니다.</li>\n<li>가사에 동일 단어가 여러 번 나올 경우 중복을 제거하고 <code>words</code>에는 하나로만 제공됩니다.</li>\n<li>각 가사 단어는 오직 알파벳 소문자로만 구성되어 있으며, 특수문자나 숫자는 포함하지 않는 것으로 가정합니다.</li>\n</ul>\n<p><strong><em>검색 키워드 제한사항</em></strong></p>\n<ul>\n<li><code>queries</code>의 길이(검색 키워드 개수)는 2 이상 100,000 이하입니다.</li>\n<li>각 검색 키워드의 길이는 1 이상 10,000 이하로 빈 문자열인 경우는 없습니다.</li>\n<li>전체 검색 키워드 길이의 합은 2 이상 1,000,000 이하입니다.</li>\n<li>검색 키워드는 중복될 수도 있습니다.</li>\n<li>각 검색 키워드는 오직 알파벳 소문자와 와일드카드 문자인 <code>'?'</code> 로만 구성되어 있으며, 특수문자나 숫자는 포함하지 않는 것으로 가정합니다.</li>\n<li>검색 키워드는 와일드카드 문자인 <code>'?'</code>가 하나 이상 포함돼 있으며, <code>'?'</code>는 각 검색 키워드의 접두사 아니면 접미사 중 하나로만 주어집니다.\n<ul>\n<li>예를 들어 <code>\"??odo\"</code>, <code>\"fro??\"</code>, <code>\"?????\"</code>는 가능한 키워드입니다.</li>\n<li>반면에 <code>\"frodo\"</code>(<code>'?'</code>가 없음), <code>\"fr?do\"</code>(<code>'?'</code>가 중간에 있음), <code>\"?ro??\"</code>(<code>'?'</code>가 양쪽에 있음)는 불가능한 키워드입니다.</li>\n</ul>\n</li>\n</ul>\n<p><strong><em>입출력 예</em></strong></p>\n<table>\n<thead>\n<tr>\n<th>words</th>\n<th>queries</th>\n<th>result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[\"frodo\", \"front\", \"frost\", \"frozen\", \"frame\", \"kakao\"]</td>\n<td>[\"fro??\", \"????o\", \"fr???\", \"fro???\", \"pro?\"]</td>\n<td>[3, 2, 4, 1, 0]</td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>입출력 예에 대한 설명</em></strong></p>\n<ul>\n<li><code>\"fro??\"</code>는 <code>\"frodo\"</code>, <code>\"front\"</code>, <code>\"frost\"</code>에 매치되므로 3입니다.</li>\n<li><code>\"????o</code>\"는 <code>\"frodo\"</code>, <code>\"kakao\"</code>에 매치되므로 2입니다.</li>\n<li><code>\"fr???\"</code>는 <code>\"frodo\"</code>, <code>\"front\"</code>, <code>\"frost\"</code>, <code>\"frame\"</code>에 매치되므로 4입니다.</li>\n<li><code>\"fro???\"</code>는 <code>\"frozen\"</code>에 매치되므로 1입니다.</li>\n<li><code>\"pro?\"</code>는 매치되는 가사 단어가 없으므로 0 입니다.</li>\n</ul>\n</blockquote>\n<h3>문제 풀이</h3>\n<ol>\n<li>Node클래스를 생성. 각 해당하는 문자의 갯수를 알기 위해서 count를 추가.</li>\n<li>Trie클래스\n<ol>\n<li>root는 new Node로 생성(root노드는 아무 문자열도 안가지고 있음.) -> \"?????\"같은 와일드 카드로만 구성된 경우에 사용</li>\n<li>insert과정에는, 최상위 노드부터 거쳐간 노드는 count를 ++해준다.</li>\n<li>search는 해당 문자를 찾으면, count를 반환한다.</li>\n</ol>\n</li>\n<li>solution 함수\n<ol>\n<li>tries의 경우 words의 크기만큼 만들어 준다.(0,1은 사용 안함.)</li>\n<li>words를 tries 배열에 trie를 만들어서 넣어주는데, 정방향과 역방향 문자열을 tries[i][0],tries[i][1]에 각각 넣어준다.(와일드카드가 앞에있는지, 뒤에있는지 확인하고 사용함.)</li>\n<li>tries 배열을 처리하고, queries에 대해서 for문.</li>\n<li>queries[i]의 길이가 tries 배열에 없다면, answer에 0을 push.</li>\n<li>queries[i]가 모두 \"?\"으로 이루어져 있다면, tries[len][0]의 root의 count값을 push.</li>\n<li>queries[i][0]가 \"?\"가 아닌경우 -> tries[len][0]에서 search 후 return 값을 push.</li>\n<li>나머지 경우(앞에서 \"?\"로 시작될 경우)에는 역순으로 문자열을 바꿔주고, tries[len][1]에서 search 후 return 값을 push.</li>\n</ol>\n</li>\n</ol>\n<pre><code class=\"language-js\">class Node {\n  constructor(value = \"\") {\n    this.value = value;\n    this.child = {};\n    this.count = 0;\n  }\n}\n\nclass Trie {\n  constructor(length) {\n    this.root = new Node();\n  }\n\n  insert(string) {\n    let currentNode = this.root;\n    currentNode.count++;\n    for (let i = 0; i &#x3C; string.length; i++) {\n      if (currentNode.child[string[i]] === undefined) {\n        currentNode.child[string[i]] = new Node(currentNode.value + string[i]);\n      }\n      currentNode = currentNode.child[string[i]];\n      currentNode.count++;\n    }\n  }\n\n  search(str) {\n    let currentNode = this.root;\n    for (let i = 0; i &#x3C; str.length; i++) {\n      if (currentNode.child[str[i]]) {\n        currentNode = currentNode.child[str[i]];\n      } else {\n        return 0;\n      }\n    }\n    return currentNode.count;\n  }\n}\n\nfunction solution(words, queries) {\n  var answer = [];\n  let tries = Array(100001);\n  for (let i = 0; i &#x3C; words.length; i++) {\n    let word = words[i];\n    let re = [...word].reverse().join(\"\");\n    let len = words[i].length;\n    if (tries[len]) {\n      tries[len][0].insert(word);\n      tries[len][1].insert(re);\n    } else {\n      tries[len] = Array(2);\n      tries[len][0] = new Trie();\n      tries[len][1] = new Trie();\n      tries[len][0].insert(word);\n      tries[len][1].insert(re);\n    }\n  }\n\n  for (let i = 0; i &#x3C; queries.length; i++) {\n    let query = queries[i];\n    if (tries[query.length] === undefined) {\n      answer.push(0);\n      continue;\n    }\n    if ([...query].every(e => e === \"?\")) {\n      let len = query.length;\n      answer.push(tries[len][0].root.count);\n    } else if (query[0] !== \"?\") {\n      let len = query.length;\n      let idx = query.indexOf(\"?\");\n      let target = query.slice(0, idx);\n      answer.push(tries[len][0].search(target));\n    } else {\n      let re = [...query].reverse().join(\"\");\n      let len = query.length;\n      let idx = re.indexOf(\"?\");\n      let target = re.slice(0, idx);\n      answer.push(tries[len][1].search(target));\n    }\n  }\n\n  return answer;\n}\n</code></pre>","frontmatter":{"title":"[프로그래머스] 레벨4 (level4) 가사 검색","date":"2020년 07월 10일, 20:30"}}},"pageContext":{"slug":"/7/post70/","previous":{"fields":{"slug":"/7/post69/"},"frontmatter":{"title":"[백준] 1094번 막대기","path":"/posts/69"}},"next":{"fields":{"slug":"/8/post71/"},"frontmatter":{"title":"[백준] 1149번 RGB거리","path":"/posts/71"}}}},"staticQueryHashes":["3649515864"],"slicesMap":{}}