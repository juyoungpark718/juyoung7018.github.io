{"componentChunkName":"component---src-templates-blog-template-js","path":"/posts/140","result":{"data":{"markdownRemark":{"html":"<h3>React.memo</h3>\n<ul>\n<li>React.memo는 고차 컴포넌트</li>\n<li>컴포넌트가 동일한 props로 동일한 결과를 렌더링한다면, 마지막으로 렌더링된 결과를 재사용하게 함</li>\n<li>얕은 비교만을 수행(다른 비교 동작을 원한다면 두 번째 인자로 별도의 비교함수 필요.)</li>\n</ul>\n<p>React는 먼저 컴포넌트를 렌더링 한 뒤, 이전 렌더된 결과와 비교하여 DOM업데이트를 결정한다. 만약 렌더 결과가 다르다면 DOM에 업데이트 한다.<br>\n하지만, 컴포넌트를 렌더링 하는 비용도 크다면, 이를 메모이징해서 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Movie</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">,</span> releaseDate <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Movie Title : </span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Release Date : </span><span class=\"token punctuation\">{</span>releaseDate<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>Movie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 얕은 비교만 수행하기 때문에 비교 방식을 수정하고 싶으면 두 번째 인자로 compare 함수를 전달하면 된다.</span>\n<span class=\"token comment\">// function compareProps(prev, next) {</span>\n<span class=\"token comment\">//   return prev.title === next.title &amp;&amp; prev.releaseDate === next.releaseDate;</span>\n<span class=\"token comment\">// }</span>\n\n<span class=\"token comment\">// export default React.memo(Movie, compareProps); </span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>위의 코드에서 Props가 바뀌지 않는다면 Movie 컴포넌트는 React.memo를 사용했으니 이전 렌더링 때 메모이징 된 결과를 그대로 사용한다.  메모이징 한 결과를 재사용 함으로써, React에서 리렌더링 할 때 가상 DOM에서 달라진 부분을 확인하지 않아 성능상 이점을 누릴 수 있다.</p>\n<ul>\n<li>클래스 컴포넌트의 경우 PureComponent 혹은 shouldComponentUpdate를 사용해야 하지만, PureComponent를 사용하라고 권장한다.(<a href=\"https://ko.reactjs.org/docs/react-component.html#shouldcomponentupdate\">https://ko.reactjs.org/docs/react-component.html#shouldcomponentupdate</a>)</li>\n</ul>\n<h3>언제 사용하면 좋을까?</h3>\n<ul>\n<li>\n<p><strong>같은 props로 렌더링이 자주 일어나는 컴포넌트</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\">  <span class=\"token keyword\">function</span> <span class=\"token function\">MovieViewsRealtime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">,</span> releaseDate<span class=\"token punctuation\">,</span> views <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Movie</span></span> <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">releaseDate</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>releaseDate<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n          Movie Views : </span><span class=\"token punctuation\">{</span>views<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> MovieViewsRealtime</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>views가 실시간으로 바뀐다고 생각해보자, 이러한 경우 title과 releaseDate는 바뀌지 않지만, views는 계속 바뀌기 때문에<br>\n메모이징을 하지 않으면 Movie 컴포넌트를 다시 실행하고 가상돔의 내용과 비교할 것이다.<br>\n하지만, React.memo를 활용하게 되면 이전 결과를 사용해 성능의 이점을 얻을 수 있을 것이다.</p>\n</li>\n</ul>\n<h3>사용하지 말아야 하는 경우</h3>\n<ul>\n<li>props가 자주 바뀌는 경우는 props에 대한 얕은 비교가 추가되는 상황이 되기 때문에 불필요한 연산을 더 하게 된다.</li>\n</ul>\n<h3>추가</h3>\n<ul>\n<li>\n<p>만약 props가 함수인 경우?</p>\n<ul>\n<li>props가 함수인 경우에는 동일 instance여야 비교를 할 수 있으므로, useCallback을 이용해서 인스턴스를 동일하게 유지시켜야한다.</li>\n</ul>\n</li>\n<li>\n<p>성능 개선의 용도로 써야한다.</p>\n<ul>\n<li>\n<p>렌더링을 <code class=\"language-text\">방지</code>하기 위해서 사용하지 말아야한다(공식문서에 그렇게 나옴)</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3>참고</h3>\n<blockquote>\n<p>출처: <a href=\"https://ui.toast.com/weekly-pick/ko_20190731\">Toast UI, React.memo() 현명하게 사용하기</a><br>\n원문: <a href=\"https://dmitripavlutin.com/use-react-memo-wisely\">https://dmitripavlutin.com/use-react-memo-wisely</a></p>\n</blockquote>\n<ul>\n<li><a href=\"https://ko.reactjs.org/docs/react-api.html#reactmemo\">React 공식문서</a></li>\n</ul>","frontmatter":{"title":"[아티클럽] React.memo() 현명하게 사용하기를 읽고","date":"2021년 05월 10일, 21:30"}}},"pageContext":{"slug":"/15/post140/","previous":{"fields":{"slug":"/14/post139/"},"frontmatter":{"title":"[아티클럽] 더 나은 UX를 위한 React에서 스켈레톤 컴포넌트 만들기을 읽고","path":"/posts/139"}},"next":{"fields":{"slug":"/15/post141/"},"frontmatter":{"title":"[백준] 1967번 트리의 지름","path":"/posts/141"}}}}}