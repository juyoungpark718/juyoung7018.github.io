{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/posts/85/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<h2>스타트링크</h2>\n<h3>문제 설명</h3>\n<p>강호는 코딩 교육을 하는 스타트업 스타트링크에 지원했다. 오늘은 강호의 면접날이다. 하지만, 늦잠을 잔 강호는 스타트링크가 있는 건물에 늦게 도착하고 말았다.</p>\n<p>스타트링크는 총 F층으로 이루어진 고층 건물에 사무실이 있고, 스타트링크가 있는 곳의 위치는 G층이다. 강호가 지금 있는 곳은 S층이고, 이제 엘리베이터를 타고 G층으로 이동하려고 한다.</p>\n<p>보통 엘리베이터에는 어떤 층으로 이동할 수 있는 버튼이 있지만, 강호가 탄 엘리베이터는 버튼이 2개밖에 없다. U버튼은 위로 U층을 가는 버튼, D버튼은 아래로 D층을 가는 버튼이다. (만약, U층 위, 또는 D층 아래에 해당하는 층이 없을 때는, 엘리베이터는 움직이지 않는다)</p>\n<p>강호가 G층에 도착하려면, 버튼을 적어도 몇 번 눌러야 하는지 구하는 프로그램을 작성하시오. 만약, 엘리베이터를 이용해서 G층에 갈 수 없다면, \"use the stairs\"를 출력한다.</p>\n<p><strong>입력</strong></p>\n<p>첫째 줄에 F, S, G, U, D가 주어진다. (1 ≤ S, G ≤ F ≤ 1000000, 0 ≤ U, D ≤ 1000000) 건물은 1층부터 시작하고, 가장 높은 층은 F층이다.</p>\n<p><strong>출력</strong></p>\n<p>첫째 줄에 강호가 S층에서 G층으로 가기 위해 눌러야 하는 버튼의 수의 최솟값을 출력한다. 만약, 엘리베이터로 이동할 수 없을 때는 \"use the stairs\"를 출력한다.</p>\n</blockquote>\n<h3>문제 풀이</h3>\n<ol>\n<li>input에서 원하는 값들을 빼서 변수선언.</li>\n<li>visited배열 선언(크기가 10000001).</li>\n<li>excuteBFS\n<ol>\n<li>queue에 currentFloor를 넣고 시작.</li>\n<li>queue의 길이가 0이 될 때까지 실행.</li>\n<li>currentFloor에 up혹은 down을 계산했을때 targetFloor와 같다면 console로 visited[curentFloor]+1 값을 찍고 함수를 종료.</li>\n<li>그게 아니라면 정상적인 값에 대해서 queue에 넣어줌.</li>\n</ol>\n</li>\n<li>(중요) 시작 층과 타겟 층이 같은 경우에 대해서 예외처리.</li>\n</ol>\n<pre><code class=\"language-js\">const fs = require(\"fs\");\nconst input = fs.readFileSync(\"/dev/stdin\").toString().trim().split(\" \");\n// const input = fs.readFileSync(\"./stdin\").toString().trim().split(\" \");\n\nconst [\n  buildingFloor,\n  currentFloor,\n  targetFloor,\n  up,\n  down,\n] = input.map(element => Number(element));\n\nconst visited = Array(1000001).fill(-1);\n\nconst excuteBFS = () => {\n  const queue = [currentFloor];\n  visited[currentFloor] = 0;\n  while (queue.length) {\n    const currentFloor = queue.shift();\n    if (\n      currentFloor + up === targetFloor ||\n      currentFloor - down === targetFloor\n    ) {\n      console.log(visited[currentFloor] + 1);\n      return;\n    }\n\n    if (\n      currentFloor + up &#x3C;= buildingFloor &#x26;&#x26;\n      visited[currentFloor + up] === -1\n    ) {\n      visited[currentFloor + up] = visited[currentFloor] + 1;\n      queue.push(currentFloor + up);\n    }\n\n    if (currentFloor - down > 0 &#x26;&#x26; visited[currentFloor - down] === -1) {\n      visited[currentFloor - down] = visited[currentFloor] + 1;\n      queue.push(currentFloor - down);\n    }\n  }\n  console.log(\"use the stairs\");\n};\n\nif (currentFloor === targetFloor) {\n  console.log(0);\n  process.exit(0);\n}\nexcuteBFS();\n</code></pre>","frontmatter":{"title":"[백준] 5014번 스타트링크","date":"2020년 07월 24일, 10:10"}}},"pageContext":{"slug":"/9/post85/","previous":{"fields":{"slug":"/9/post84/"},"frontmatter":{"title":"[백준] 1697번 숨바꼭질","path":"/posts/84"}},"next":{"fields":{"slug":"/9/post86/"},"frontmatter":{"title":"[백준] 2468번 안전 영역","path":"/posts/86"}}}},"staticQueryHashes":["3649515864"],"slicesMap":{}}