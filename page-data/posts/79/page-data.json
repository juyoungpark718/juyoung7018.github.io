{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/posts/79/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<h2>미로 탐색</h2>\n<h3>문제 설명</h3>\n<p>N×M크기의 배열로 표현되는 미로가 있다.</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>1</strong></td>\n<td>0</td>\n<td><strong>1</strong></td>\n<td><strong>1</strong></td>\n<td><strong>1</strong></td>\n<td><strong>1</strong></td>\n</tr>\n<tr>\n<td><strong>1</strong></td>\n<td>0</td>\n<td><strong>1</strong></td>\n<td>0</td>\n<td><strong>1</strong></td>\n<td>0</td>\n</tr>\n<tr>\n<td><strong>1</strong></td>\n<td>0</td>\n<td><strong>1</strong></td>\n<td>0</td>\n<td><strong>1</strong></td>\n<td><strong>1</strong></td>\n</tr>\n<tr>\n<td><strong>1</strong></td>\n<td><strong>1</strong></td>\n<td><strong>1</strong></td>\n<td>0</td>\n<td><strong>1</strong></td>\n<td><strong>1</strong></td>\n</tr>\n</tbody>\n</table>\n<p>미로에서 1은 이동할 수 있는 칸을 나타내고, 0은 이동할 수 없는 칸을 나타낸다. 이러한 미로가 주어졌을 때, (1, 1)에서 출발하여 (N, M)의 위치로 이동할 때 지나야 하는 최소의 칸 수를 구하는 프로그램을 작성하시오. 한 칸에서 다른 칸으로 이동할 때, 서로 인접한 칸으로만 이동할 수 있다.</p>\n<p>위의 예에서는 15칸을 지나야 (N, M)의 위치로 이동할 수 있다. 칸을 셀 때에는 시작 위치와 도착 위치도 포함한다.</p>\n<p><strong><em>입력</em></strong></p>\n<p>첫째 줄에 두 정수 N, M(2 ≤ N, M ≤ 100)이 주어진다. 다음 N개의 줄에는 M개의 정수로 미로가 주어진다. 각각의 수들은 붙어서 입력으로 주어진다.</p>\n<p><strong><em>출력</em></strong></p>\n<p>첫째 줄에 지나야 하는 최소의 칸 수를 출력한다. 항상 도착위치로 이동할 수 있는 경우만 입력으로 주어진다.</p>\n</blockquote>\n<h3>문제 풀이</h3>\n<ol>\n<li>미로 2차원 배열과, 방문횟수 2차원 배열을 만들어준다.</li>\n<li>bfs를 구현\n<ol>\n<li>queue에는 시작점 [0,0]과 count값을 포함해서 <a href=\"x,y,%EB%B0%A9%EB%AC%B8%ED%9A%9F%EC%88%98\">0,0,0</a>를 넣어준다.</li>\n<li>상하좌우 4가지 방향 for문.\n<ol>\n<li>nx,ny가 비정상적인 값과, 갈수있는 길이 아닌경우, 방문한 경우는 continue.</li>\n<li>가능한 길인 경우 visited를 바꿔주고, 방문 횟수를 count+1해주고 queue에 push한다.</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<pre><code class=\"language-js\">const fs = require(\"fs\");\nconst input = fs.readFileSync(\"/dev/stdin\").toString().trim().split(\"\\n\");\n// const input = fs.readFileSync(\"./stdin\").toString().trim().split(\"\\n\");\n\nconst dx = [1, 0, -1, 0];\nconst dy = [0, 1, 0, -1];\n\nconst [row, column] = input[0].split(\" \").map(element => Number(element));\n\nconst getMaze = inputs => {\n  const maze = [];\n\n  for (let rowIndex = 0; rowIndex &#x3C; row; rowIndex++) {\n    const mazeRow = [];\n    const rowInputs = inputs[rowIndex]\n      .trim()\n      .split(\"\")\n      .map(element => Number(element));\n    for (let columnIndex = 0; columnIndex &#x3C; column; columnIndex++) {\n      mazeRow.push(rowInputs[columnIndex]);\n    }\n    maze.push(mazeRow);\n  }\n\n  return maze;\n};\n\nconst maze = getMaze(input.slice(1, input.length));\nconst checkVistiedCount = Array.from(Array(row), () => Array(column).fill(0));\nconst visited = Array.from(Array(row), () => Array(column).fill(false));\n\nconst bfs = () => {\n  const queue = [[0, 0, 0]];\n  visited[0][0] = true;\n  while (queue.length !== 0) {\n    const [x, y, count] = queue.shift();\n    for (let i = 0; i &#x3C; 4; i++) {\n      const nx = x + dx[i];\n      const ny = y + dy[i];\n      if (\n        nx &#x3C; 0 ||\n        ny &#x3C; 0 ||\n        nx >= column ||\n        ny >= row ||\n        maze[ny][nx] === 0 ||\n        visited[ny][nx] ||\n        checkVistiedCount[ny][nx] !== 0\n      )\n        continue;\n      visited[ny][nx] = true;\n      checkVistiedCount[ny][nx] = count + 1;\n      queue.push([nx, ny, count + 1]);\n    }\n  }\n};\n\nbfs();\n\nconsole.log(checkVistiedCount[row - 1][column - 1] + 1);\n</code></pre>","frontmatter":{"title":"[백준] 2178번 미로 탐색","date":"2020년 07월 18일, 10:30"}}},"pageContext":{"slug":"/8/post79/","previous":{"fields":{"slug":"/8/post78/"},"frontmatter":{"title":"[백준] 1012번 유기농 배추","path":"/posts/78"}},"next":{"fields":{"slug":"/8/post80/"},"frontmatter":{"title":"[백준] 2606번 바이러스","path":"/posts/80"}}}},"staticQueryHashes":["3649515864"],"slicesMap":{}}