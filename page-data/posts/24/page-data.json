{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/posts/24/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<h2>캐시</h2>\n<h3>문제설명</h3>\n<p>지도개발팀에서 근무하는 제이지는 지도에서 도시 이름을 검색하면 해당 도시와 관련된 맛집 게시물들을 데이터베이스에서 읽어 보여주는 서비스를 개발하고 있다.\n이 프로그램의 테스팅 업무를 담당하고 있는 어피치는 서비스를 오픈하기 전 각 로직에 대한 성능 측정을 수행하였는데, 제이지가 작성한 부분 중 데이터베이스에서 게시물을 가져오는 부분의 실행시간이 너무 오래 걸린다는 것을 알게 되었다.\n어피치는 제이지에게 해당 로직을 개선하라고 닦달하기 시작하였고, 제이지는 DB 캐시를 적용하여 성능 개선을 시도하고 있지만 캐시 크기를 얼마로 해야 효율적인지 몰라 난감한 상황이다.</p>\n<p>어피치에게 시달리는 제이지를 도와, DB 캐시를 적용할 때 캐시 크기에 따른 실행시간 측정 프로그램을 작성하시오.</p>\n<p><strong><em>입력 형식</em></strong></p>\n<ul>\n<li>캐시 크기(cacheSize)와 도시이름 배열(cities)을 입력받는다.</li>\n<li>cacheSize는 정수이며, 범위는 0 ≦ cacheSize ≦ 30 이다.</li>\n<li>cities는 도시 이름으로 이뤄진 문자열 배열로, 최대 도시 수는 100,000개이다.</li>\n<li>각 도시 이름은 공백, 숫자, 특수문자 등이 없는 영문자로 구성되며, 대소문자 구분을 하지 않는다. 도시 이름은 최대 20자로 이루어져 있다.</li>\n</ul>\n<p><strong><em>출력 형식</em></strong></p>\n<ul>\n<li>입력된 도시이름 배열을 순서대로 처리할 때, 총 실행시간을 출력한다.</li>\n</ul>\n<p><strong><em>조건</em></strong></p>\n<ul>\n<li>캐시 교체 알고리즘은 LRU(Least Recently Used)를 사용한다.</li>\n<li>cache hit일 경우 실행시간은 1이다.</li>\n<li>cache miss일 경우 실행시간은 5이다.</li>\n</ul>\n<p><strong><em>입출력 예제</em></strong></p>\n<table>\n<thead>\n<tr>\n<th>캐시크기(cacheSize)</th>\n<th>도시이름(cities)</th>\n<th>실행시간</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3</td>\n<td>[Jeju, Pangyo, Seoul, NewYork, LA, Jeju, Pangyo, Seoul, NewYork, LA]</td>\n<td>50</td>\n</tr>\n<tr>\n<td>3</td>\n<td>[Jeju, Pangyo, Seoul, Jeju, Pangyo, Seoul, Jeju, Pangyo, Seoul]</td>\n<td>21</td>\n</tr>\n<tr>\n<td>2</td>\n<td>[Jeju, Pangyo, Seoul, NewYork, LA, SanFrancisco, Seoul, Rome, Paris, Jeju, NewYork, Rome]</td>\n<td>60</td>\n</tr>\n<tr>\n<td>5</td>\n<td>[Jeju, Pangyo, Seoul, NewYork, LA, SanFrancisco, Seoul, Rome, Paris, Jeju, NewYork, Rome]</td>\n<td>52</td>\n</tr>\n<tr>\n<td>2</td>\n<td>[Jeju, Pangyo, NewYork, newyork]</td>\n<td>16</td>\n</tr>\n<tr>\n<td>0</td>\n<td>[Jeju, Pangyo, Seoul, NewYork, LA]</td>\n<td>25</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h2>문제풀이</h2>\n<p>LRU알고리즘은 제일 오래 사용되지 않은 것부터 제거하는 것이다.<br>\n캐시에 저장된 도시들의 사용시간을 체크하고, 이에 따라 캐시에 도시를 추가할때, 삭제할 타겟을 정해야한다.</p>\n<ol>\n<li>cache에 city가 있는지 아닌지 찾는다.\n<ol>\n<li>있는 경우, hit이므로 answer += 1 하고 cache의 사용시간을 0으로 초기화 해준다.</li>\n<li>없는 경우, miss이므로 answer += 5 하고 addCache를 통해 cache에 도시를 넣어준다.</li>\n</ol>\n</li>\n<li>addCache에서는 cacheSize만큼 key가 있을때와 없을때로 나뉜다.\n<ol>\n<li>size만큼 key가 있는 경우, cache의 [key,value]에서 value값이 가장 큰 도시를 삭제하고, cache에 city를 넣어준다.</li>\n<li>size만큼 key가 없는 경우, cache에 city를 넣어준다.</li>\n</ol>\n</li>\n<li>이 과정을 cities 배열의 크기만큼 for문을 돌려주면 된다.<br>\n하지만, for문이 돌아갈 때, 도시의 사용시간를 올려줘야하기 때문에 updateCache함수를 통해 모든 도시의 사용시간 +1을 해준다.</li>\n</ol>\n<pre><code class=\"language-js\">function solution(cacheSize, cities) {\n  var answer = 0;\n  let cache = {};\n  if (cacheSize === 0) return cities.length * 5;\n  cities.forEach(city => {\n    if (findCity(cache, city.toLowerCase())) {\n      answer += 1;\n      cache[findCity(cache, city.toLowerCase())] = 0;\n    } else {\n      answer += 5;\n      cache = addCache(cache, cacheSize, city.toLowerCase());\n    }\n    cache = updateCache(cache);\n  });\n  return answer;\n}\n\nfunction addCache(cache, cacheSize, city) {\n  //캐시에 도시를 추가.\n  const keyArr = Object.keys(cache);\n  if (keyArr.length === cacheSize) {\n    keyArr.sort((a, b) => {\n      return cache[b] - cache[a];\n    });\n    delete cache[keyArr[0]];\n  }\n  cache[city] = 0;\n  return cache;\n}\n\nfunction updateCache(cache) {\n  // 캐시에 있는 도시들이 사용되지 않았을때, +1씩 추가.\n  for (let key in cache) {\n    cache[key] += 1;\n  }\n  return cache;\n}\n\nfunction findCity(cache, city) {\n  // 도시가 존재하는지 아닌지 찾음.\n  const keyArr = Object.keys(cache);\n  const idx = keyArr.findIndex(e => e === city);\n  return keyArr[idx];\n}\n</code></pre>\n<h4>아쉬운점 || 느낀 점</h4>\n<p>문제 지문의 제한 조건을 잘 확인을 안해서,<br>\n도시의 이름이 소문자일 경우와 cache의 사이즈가 0일 경우를 생각을 못하고 제출하니 당연히 틀렸다.<br>\n앞으로는 더 잘 확인해서 채점이 한번에 통과하게 하는 것을 목표로 해야겠다.</p>","frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 캐시","date":"2020년 05월 26일, 09:40"}}},"pageContext":{"slug":"/3/post24/","previous":{"fields":{"slug":"/3/post23/"},"frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 프렌즈4블록","path":"/posts/23"}},"next":{"fields":{"slug":"/3/post25/"},"frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 오픈채팅방","path":"/posts/25"}}}},"staticQueryHashes":["3649515864"],"slicesMap":{}}