{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/posts/156/","result":{"data":{"markdownRemark":{"html":"<p>Turborepo는 Turbo를 사용한 JS, TS codebase를 위한 빌드시스템이다. 터보레포는 캐싱을 이용해서 작업에 대한 시간을 줄여준다.</p>\n<p>터보레포는 점진적으로 적용될 수 있게 설계되어서, 대다수의 코드 베이스에 빠른 시간 안에 추가할 수 있고 만약 모노레포 환경이라면 다른 모노레포 툴(npm, yarn, npm)과 함께 사용할 수 있어 바로 추가할 수 있다.</p>\n<p>터보레포에는 9가지 특징이 있다고 하는데 몇 개만 알아보자.</p>\n<h3>incremental builds</h3>\n<p>터보레포는 증분 빌드를 사용하는데, 작업 진행 내용에 대해서는 캐싱을 통해서 이미 진행된 작업은 건너 뛴다.</p>\n<h3>Content-aware hasing</h3>\n<p>타임스탬프가 아닌 콘텐츠를 인식하여 모든 파일을 다시 빌드하는게 아니라 변경된 파일만 빌드한다.</p>\n<h3>Remote Caching</h3>\n<p>캐싱을 이용해서 빌드 시간을 줄이는 것은 로컬에서만 가능한 일이다. 하지만 터보레포에서는 원격 캐싱을 지원한다. 캐싱의 결과를 클라우드에 올려서 팀원 및 CI/CD에 공유해서 사용할 수 있어서 캐싱의 이점을 로컬이 아닌 다다른 환경에서도 가져갈 수 있다.</p>\n<p>이 외에도,</p>\n<ul>\n<li>Parallel excution\n<ul>\n<li>모든 코어를 사용하는 병렬 실행을 목표로 함. 지정된 태스트 단위로 의존성을 판단해 최대한 병렬적으로 실행</li>\n</ul>\n</li>\n<li>Task Pipelines\n<ul>\n<li>태스크 간의 연결을 정의해서 빌드를 언제 어떻게 실행할지 판단해 최적화</li>\n</ul>\n</li>\n<li>Zero runtime Overhead\n<ul>\n<li>런타임 코드와 소스맵을 다루지 않기 때문에 런타임 단게에서 파악하지 못한 리스크가 불거질 위험이 없음</li>\n</ul>\n</li>\n<li>Pruned subsets\n<ul>\n<li>빌드에 필요한 요소만으로 모노 레포 하위 집합을 생성해 PaaS배포 속도를 높임</li>\n</ul>\n</li>\n<li>JSON Configuration\n<ul>\n<li>JSON 설정으로 터보레포 사용 가능</li>\n</ul>\n</li>\n<li>Profile in browser\n<ul>\n<li>빌드 과정을 시각화 -> 병목 지점을 쉽게 찾을 수 있음</li>\n</ul>\n</li>\n</ul>\n<h2>Configuration Option</h2>\n<p>터보레포는 <code>turbo.json</code> 파일을 통해서 환경 설정이 가능하다.</p>\n<p>여러 가지가 있지만, pipeline을 살펴보자.</p>\n<ul>\n<li>pipeline\n<ul>\n<li>각 객체의 키는 <code>turbo run</code>으로 실행할 수 있는 작업의 이름</li>\n<li><code>package.json</code>에 일치하는 키를 찾아서 실행시킨다.</li>\n<li>dependsOn\n<ul>\n<li>어떤 태스크에 의존하는지 표현</li>\n<li><code>^</code> 을 사용하면  의존성(dependencies, devDependencies) 빌드 명령이 실행된 후에 <code>build</code> 명령어를 실행한다.</li>\n</ul>\n</li>\n<li>outputMode\n<ul>\n<li>output 로그 타입을 지정</li>\n<li><code>full</code> 이 디폴트 속성 (모든 것을 보여줌)</li>\n<li><a href=\"https://turbo.build/repo/docs/reference/configuration#outputmode\">참고</a></li>\n</ul>\n</li>\n<li>cache\n<ul>\n<li>캐싱 여부</li>\n</ul>\n</li>\n<li>persistent\n<ul>\n<li>오래 걸리는 작업(ex dev server or --watch mode)이 있는 경우 사용</li>\n<li>turbo가  다른 작업들이 오래걸리는 작업에 의존하는 것을 막음</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"$schema\": \"https://turbo.build/schema.json\", // 이건 뭐지..?\n  \"pipeline\": {\n    \"build\": {  \n      \"dependsOn\": [\"^build\"] // dependencies, devDependencies가 실행되고 build 명령어를 실행\n    },\n    \"test\": {\n      \"outputs\": [\"coverage/**\"],\n      \"dependsOn\": [\"build\"],\n      \"inputs\": [\"src/**/*.tsx\", \"src/**/*.ts\", \"test/**/*.ts\"],\n      \"outputMode\": \"full\"\n    },\n    \"dev\": {\n      \"cache\": false,\n      \"persistent\": true\n    }\n  }\n}\n</code></pre>\n<p><strong>참고</strong></p>\n<ul>\n<li>Turbo는 vercel에서 만든 JS, TS에 최적화된 증분 빌더 그리고 빌드 시스템이다.</li>\n<li>증분 빌드(Incremental bundle)?\n<ul>\n<li>주로 대규모 프로젝트에서 사용 되는데, 재빌드를 할 때 이전 빌드와 비교하여 다시 빌드가 필요한지 아닌지 판단하여 변경된 부분만 빌드하는 것을 뜻한다.</li>\n</ul>\n</li>\n<li><a href=\"https://engineering.linecorp.com/ko/blog/monorepo-with-turborepo\">https://engineering.linecorp.com/ko/blog/monorepo-with-turborepo</a></li>\n<li><a href=\"https://turbo.build/repo\">https://turbo.build/repo</a></li>\n</ul>","frontmatter":{"title":"Turbo repo 간단한 정리","date":"2023년 07월 30일, 23:59"}}},"pageContext":{"slug":"/16/post156/","previous":{"fields":{"slug":"/16/post155/"},"frontmatter":{"title":"7월 4주차","path":"/posts/155"}},"next":{"fields":{"slug":"/16/post157/"},"frontmatter":{"title":"8월 1주차","path":"/posts/157"}}}},"staticQueryHashes":["3649515864"],"slicesMap":{}}