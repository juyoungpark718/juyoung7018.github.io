{"componentChunkName":"component---src-templates-blog-template-js","path":"/posts/19","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<h2>영어 끝말잇기</h2>\n<h3>문제 설명</h3>\n<p>1부터 n까지 번호가 붙어있는 n명의 사람이 영어 끝말잇기를 하고 있습니다. 영어 끝말잇기는 다음과 같은 규칙으로 진행됩니다.</p>\n<ul>\n<li>1번부터 번호 순서대로 한 사람씩 차례대로 단어를 말합니다.</li>\n<li>마지막 사람이 단어를 말한 다음에는 다시 1번부터 시작합니다.</li>\n<li>앞사람이 말한 단어의 마지막 문자로 시작하는 단어를 말해야 합니다.</li>\n<li>이전에 등장했던 단어는 사용할 수 없습니다.</li>\n<li>한 글자인 단어는 인정되지 않습니다.</li>\n</ul>\n<p>다음은 3명이 끝말잇기를 하는 상황을 나타냅니다.</p>\n<p>tank → kick → know → wheel → land → dream → mother → robot → tank</p>\n<p>위 끝말잇기는 다음과 같이 진행됩니다.</p>\n<ul>\n<li>1번 사람이 자신의 첫 번째 차례에 tank를 말합니다.</li>\n<li>2번 사람이 자신의 첫 번째 차례에 kick을 말합니다.</li>\n<li>3번 사람이 자신의 첫 번째 차례에 know를 말합니다.</li>\n<li>1번 사람이 자신의 두 번째 차례에 wheel을 말합니다.</li>\n<li>(계속 진행)\n끝말잇기를 계속 진행해 나가다 보면, 3번 사람이 자신의 세 번째 차례에 말한 tank 라는 단어는 이전에 등장했던 단어이므로 탈락하게 됩니다.</li>\n</ul>\n<p>사람의 수 n과 사람들이 순서대로 말한 단어 words 가 매개변수로 주어질 때, 가장 먼저 탈락하는 사람의 번호와 그 사람이 자신의 몇 번째 차례에 탈락하는지를 구해서 return 하도록 solution 함수를 완성해주세요.</p>\n<p><strong><em>제한 사항</em></strong></p>\n<ul>\n<li>끝말잇기에 참여하는 사람의 수 n은 2 이상 10 이하의 자연수입니다.</li>\n<li>words는 끝말잇기에 사용한 단어들이 순서대로 들어있는 배열이며, 길이는 n 이상 100 이하입니다.</li>\n<li>단어의 길이는 2 이상 50 이하입니다.</li>\n<li>모든 단어는 알파벳 소문자로만 이루어져 있습니다.</li>\n<li>끝말잇기에 사용되는 단어의 뜻(의미)은 신경 쓰지 않으셔도 됩니다.</li>\n<li>정답은 [ 번호, 차례 ] 형태로 return 해주세요.</li>\n<li>만약 주어진 단어들로 탈락자가 생기지 않는다면, [0, 0]을 return 해주세요.</li>\n</ul>\n<p><strong><em>입출력 예</em></strong></p>\n<table>\n<thead>\n<tr>\n<th>n</th>\n<th>words</th>\n<th>result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3</td>\n<td>[\"tank\", \"kick\", \"know\", \"wheel\", \"land\", \"dream\", \"mother\", \"robot\", \"tank\"]</td>\n<td>[3,3]</td>\n</tr>\n<tr>\n<td>5</td>\n<td>[\"hello\", \"observe\", \"effect\", \"take\", \"either\", \"recognize\", \"encourage\", \"ensure\", \"establish\", \"hang\", \"gather\", \"refer\", \"reference\", \"estimate\", \"executive\"]</td>\n<td>[0,0]</td>\n</tr>\n<tr>\n<td>2</td>\n<td>[\"hello\", \"one\", \"even\", \"never\", \"now\", \"world\", \"draw\"]</td>\n<td>[1,3]</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h2>문제설명</h2>\n<p>사실 if문만 잘 해주면 쉽게 풀리는 문제다. 사용된 단어의 배열(usedWords)을 만들고,<br>\nusedWords배열에 있는지 아닌지 확인하고, 아니라면 전 단어와 끝말잇기를 비교하면 된다.\n그리고 number와 차례를 배열로 리턴하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> words</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> answer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> usedWords <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> order <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> words<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>usedWords<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>usedWords<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        usedWords<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n          usedWords<span class=\"token punctuation\">[</span>usedWords<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>\n            usedWords<span class=\"token punctuation\">[</span>usedWords<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n          <span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> words<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          usedWords<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          number <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> n <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> n <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> n<span class=\"token punctuation\">;</span>\n          order <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">/</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      number <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> n <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> n <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> n<span class=\"token punctuation\">;</span>\n      order <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">/</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>아쉬운 점 || 느낀 점</h4>\n<p>집중력이 떨어진 상태에서 풀어서 그런지 모르지만, 조금 오래 걸렸다..<br>\n그래도 문제 자체는 어렵지 않았다.</p>","frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 영어 끝말잇기","date":"2020년 05월 22일, 17:55"}}},"pageContext":{"slug":"/2/post19/","previous":{"fields":{"slug":"/2/post18/"},"frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 점프와 순간이동","path":"/posts/18"}},"next":{"fields":{"slug":"/2/post20/"},"frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 예상 대진표","path":"/posts/20"}}}},"staticQueryHashes":["1791144535","3649515864"]}