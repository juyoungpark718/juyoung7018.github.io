{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/posts/17/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<h3>소수 만들기</h3>\n<h2>문제 설명</h2>\n<p>주어진 숫자 중 3개의 수를 더했을 때 소수가 되는 경우의 개수를 구하려고 합니다. 숫자들이 들어있는 배열 nums가 매개변수로 주어질 때, nums에 있는 숫자들 중 서로 다른 3개를 골라 더했을 때 소수가 되는 경우의 개수를 return 하도록 solution 함수를 완성해주세요.</p>\n<p><strong><em>제한사항</em></strong></p>\n<ul>\n<li>nums에 들어있는 숫자의 개수는 3개 이상 50개 이하입니다.</li>\n<li>nums의 각 원소는 1 이상 1,000 이하의 자연수이며, 중복된 숫자가 들어있지 않습니다.</li>\n</ul>\n<p><strong><em>입출력 예</em></strong></p>\n<table>\n<thead>\n<tr>\n<th>nums</th>\n<th>result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[1,2,3,4]</td>\n<td>1</td>\n</tr>\n<tr>\n<td>[1,2,7,6,4]</td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h3>처음 생각</h3>\n<p>처음에는 문제를 보자마자 아 조합문제니까 재귀를 이용해서 풀어야겠다!하고 시작했다.\n답은 맞았는데 1점 밖에 안주는걸 보고 응?하고 다른 사람의 풀이를 봤는데,<br>\nfor문으로만 푸신 분들이 많았다.. 그래서 꼭 재귀가 답은 아니구나 라는 생각이 다시한번 들었다.<br>\n만약, 뽑아야 하는 수가 더 많았으면 재귀를 활용해서 할 수 밖에 없겠지만, 3가지 숫자이기 때문에 for문을 중첩으로해서 충분히 가능한 문제였다.</p>\n<h2>문제풀이</h2>\n<p>3가지 숫자를 골라서 더해야 하기 때문에 for문을 3개 사용하면 된다.\n2번째 포문은 1번째 포문보다 +1에서 시작하고,\n3번째 포문은 2번째 포문보다 +1에서 시작하게 만들어서 모든 숫자를 보면 된다.\n그리고 total값이 소수일 때만 answer++한다.\n(여기서 answer값은 0으로 초기화 => 0인 경우가 존재.)</p>\n<pre><code class=\"language-js\">function solution(nums) {\n  var answer = 0;\n  // answer = permutation(nums,0,1);\n  for (let i = 0; i &#x3C; nums.length; i++) {\n    for (let j = i + 1; j &#x3C; nums.length; j++) {\n      for (let k = j + 1; k &#x3C; nums.length; k++) {\n        let total = nums[i] + nums[j] + nums[k];\n        if (checkPrime(total)) {\n          answer++;\n        }\n      }\n    }\n  }\n\n  return answer;\n}\n\nfunction checkPrime(num) {\n  for (let i = 2; i &#x3C;= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}\n</code></pre>\n<p>추가,\n재귀로 순열을 짜서 품.</p>\n<pre><code class=\"language-js\">function solution(nums) {\n  var answer = 0;\n  answer = permutation(nums, 0, 1);\n  return answer;\n}\n\nfunction permutation(nums, total, dep) {\n  return nums.reduce((acc, val, idx) => {\n    let newArr = [...nums];\n    if (idx === 0) newArr.splice(idx, 1);\n    else newArr.splice(0, idx + 1);\n    total += val;\n    dep++;\n    if (dep === 3) {\n      if (checkPrime(total)) return ++acc;\n      else return acc;\n    }\n    let result = permutation(nums, total, dep);\n    acc += result;\n    total -= val;\n    return acc;\n  }, 0);\n}\n\nfunction checkPrime(num) {\n  for (let i = 2; i &#x3C;= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}\n</code></pre>","frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 소수 만들기","date":"2020년 05월 21일, 11:29"}}},"pageContext":{"slug":"/2/post17/","previous":{"fields":{"slug":"/2/post16/"},"frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 짝지어 제거하기","path":"/posts/16"}},"next":{"fields":{"slug":"/2/post18/"},"frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 점프와 순간이동","path":"/posts/18"}}}},"staticQueryHashes":["3649515864"],"slicesMap":{}}