{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/posts/107/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<h2>베스트 앨범</h2>\n<h3>문제 설명</h3>\n<p>스트리밍 사이트에서 장르 별로 가장 많이 재생된 노래를 두 개씩 모아 베스트 앨범을 출시하려 합니다. 노래는 고유 번호로 구분하며, 노래를 수록하는 기준은 다음과 같습니다.</p>\n<p>속한 노래가 많이 재생된 장르를 먼저 수록합니다.\n장르 내에서 많이 재생된 노래를 먼저 수록합니다.\n장르 내에서 재생 횟수가 같은 노래 중에서는 고유 번호가 낮은 노래를 먼저 수록합니다.\n노래의 장르를 나타내는 문자열 배열 genres와 노래별 재생 횟수를 나타내는 정수 배열 plays가 주어질 때, 베스트 앨범에 들어갈 노래의 고유 번호를 순서대로 return 하도록 solution 함수를 완성하세요.</p>\n<p><strong><em>제한사항</em></strong></p>\n<ul>\n<li>genres[i]는 고유번호가 i인 노래의 장르입니다.</li>\n<li>plays[i]는 고유번호가 i인 노래가 재생된 횟수입니다.</li>\n<li>genres와 plays의 길이는 같으며, 이는 1 이상 10,000 이하입니다.</li>\n<li>장르 종류는 100개 미만입니다.</li>\n<li>장르에 속한 곡이 하나라면, 하나의 곡만 선택합니다.</li>\n<li>모든 장르는 재생된 횟수가 다릅니다.</li>\n</ul>\n<p><strong><em>입출력 예</em></strong></p>\n<table>\n<thead>\n<tr>\n<th>genres</th>\n<th>plays</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[classic, pop, classic, classic, pop]</td>\n<td>[500, 600, 150, 800, 2500]</td>\n<td>[4, 1, 3, 0]</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h3>문제풀이</h3>\n<p>조건 3가지를 만족하는 노래를 골라야한다.</p>\n<ol>\n<li>가장 많이 플레이된 장르</li>\n<li>가장 많이 플레이된 곡</li>\n<li>장르, 플레이 횟수가 같은 곡이면 노래의 Index를 기준.</li>\n</ol>\n<p>그래서 위의 단계에 맞춰서 코드를 짰다.</p>\n<ol>\n<li>가장 많이 플레이된 장르를 구하기.\n<ol>\n<li>Genres와 plays를 이용해서 Object를 만들어 각 genre당 총 횟수를 저장.</li>\n<li>Object.entries를 이용해서 배열로 반환.</li>\n<li>배열로 반환된 값을 정렬.(가장 많이 플레이된 장르)</li>\n</ol>\n</li>\n<li>장르별 노래들 구하기.(가장 많이 플레이된 곡)\n<ol>\n<li>Genres와 plays를 이용해서 Object를 만들어 각 genre에 속한 노래들을 [index,count] 형태로 저장</li>\n<li>compareFn을 만든다.\n<ol>\n<li>count가 같은 경우는 index를 기준으로 정렬.</li>\n<li>그 외의 경우는 count로 정렬</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>genre 당 총 횟수 obj의 entries 배열을 길이만큼 노래들을 뽑는다</li>\n</ol>\n<pre><code class=\"language-js\">function solution(genres, plays) {\n  const answer = [];\n  const songCountByGenres = Object.entries(\n    genres.reduce((obj, genre, index) => {\n      obj[genre] ? (obj[genre] += plays[index]) : (obj[genre] = plays[index]);\n      return obj;\n    }, {})\n  ).sort((a, b) => b[1] - a[1]);\n  const songByGenres = genres.reduce((obj, genre, index) => {\n    obj[genre]\n      ? obj[genre].push([index, plays[index]])\n      : (obj[genre] = [[index, plays[index]]]);\n    return obj;\n  }, {});\n  const compareCount = (a, b) => {\n    if (a[1] === b[1]) return a[0] - b[0];\n    return b[1] - a[1];\n  };\n\n  for (let i = 0; i &#x3C; songCountByGenres.length; i++) {\n    const genre = songCountByGenres[i][0];\n    const songs = songByGenres[genre].sort(compareCount);\n    answer.push(...songs.slice(0, 2).map(song => song[0]));\n  }\n\n  return answer;\n}\n</code></pre>\n<h3>아쉬운 점 || 느낀 점</h3>\n<p>문제를 제대로 읽지 않아서, 각 앨범당 2곡이 아니라 2개의 앨범 당 2곡인줄 알았다.\n문제를 제대로 읽어야겠다..\n그리고 obj를 만드는 것도 reduce를 사용하는 것을 잘 활용해야 겠다.(이전에 위장문제에서 다른 사람의 풀이를 보고 배움.)</p>","frontmatter":{"title":"[프로그래머스] 레벨3 (level3) 베스트 앨범","date":"2020년 12월 24일, 14:39"}}},"pageContext":{"slug":"/11/post107/","previous":{"fields":{"slug":"/11/post106/"},"frontmatter":{"title":"TDD - 테스트 주도 개발","path":"/posts/106"}},"next":{"fields":{"slug":"/11/post108/"},"frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 타겟 넘버","path":"/posts/108"}}}},"staticQueryHashes":["3649515864"],"slicesMap":{}}