{"componentChunkName":"component---src-templates-blog-template-js","path":"/posts/118","result":{"data":{"markdownRemark":{"html":"<h2>생성 패턴 - 싱글턴(Singleton)</h2>\n<ul>\n<li>단 하나의 인스턴스를 사용하고, 생성된 객체를 어디에서든지 참조할 수 있도록 하는 패턴</li>\n<li>\n<p><strong>장점</strong></p>\n<ul>\n<li>한번의 인스턴스 생성 후 하나의 인스턴스만 사용하므로 메모리 낭비를 방지 할 수 있음</li>\n<li>전역 인스턴스이기 때문에 다른 클래스의 인스턴스들이 데이터를 공유하기 쉽다</li>\n</ul>\n</li>\n<li>\n<p><strong>단점</strong></p>\n<ul>\n<li>\n<p>인스턴스가 너무 많은 일을 하거나 데이터를 공유시킬 경우 다른 클래스의 인스턴스들 간에 결합도가 높아짐(개방-폐쇄 원칙 위배)</p>\n<ul>\n<li>따라서, 테스트와 수정이 어려워짐</li>\n</ul>\n</li>\n<li>\n<p>멀티 쓰레드 환경에서 race condition이 발생 할 수 있음</p>\n<ul>\n<li>보통, 클래스 안에서 생성자를 private하게하여 내부에서만 호출 될 수 있게하여 아예 class가 초기화되는 시점에 instance를 생성</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>참고자료</h3>\n<ul>\n<li><a href=\"https://dailyheumsi.tistory.com/149?category=855210\">https://dailyheumsi.tistory.com/149?category=855210</a></li>\n<li><a href=\"https://gmlwjd9405.github.io/2018/07/06/singleton-pattern.html\">https://gmlwjd9405.github.io/2018/07/06/singleton-pattern.html</a></li>\n<li><a href=\"https://jeong-pro.tistory.com/86\">https://jeong-pro.tistory.com/86</a></li>\n</ul>","frontmatter":{"title":"[디자인패턴] 싱글턴(Singleton)","date":"2021년 02월 19일, 20:30"}}},"pageContext":{"slug":"/12/post118/","previous":{"fields":{"slug":"/12/post117/"},"frontmatter":{"title":"[디자인패턴] 디자인 패턴이란?","path":"/posts/117"}},"next":{"fields":{"slug":"/12/post119/"},"frontmatter":{"title":"[자료구조] B tree","path":"/posts/119"}}}}}