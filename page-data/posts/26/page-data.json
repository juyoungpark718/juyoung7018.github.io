{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/posts/26/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<h2>소수 찾기</h2>\n<h3>문제 설명</h3>\n<p>한자리 숫자가 적힌 종이 조각이 흩어져있습니다. 흩어진 종이 조각을 붙여 소수를 몇 개 만들 수 있는지 알아내려 합니다.</p>\n<p>각 종이 조각에 적힌 숫자가 적힌 문자열 numbers가 주어졌을 때, 종이 조각으로 만들 수 있는 소수가 몇 개인지 return 하도록 solution 함수를 완성해주세요.</p>\n<p><strong><em>제한사항</em></strong></p>\n<ul>\n<li>numbers는 길이 1 이상 7 이하인 문자열입니다.</li>\n<li>numbers는 0~9까지 숫자만으로 이루어져 있습니다.</li>\n<li>013은 0, 1, 3 숫자가 적힌 종이 조각이 흩어져있다는 의미입니다.</li>\n</ul>\n<p><strong><em>입출력 예</em></strong></p>\n<table>\n<thead>\n<tr>\n<th>numbers</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>17</td>\n<td>3</td>\n</tr>\n<tr>\n<td>011</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>입출력 예 설명</em></strong>\n예제 #1\n[1, 7]으로는 소수 [7, 17, 71]를 만들 수 있습니다.</p>\n<p>예제 #2\n[0, 1, 1]으로는 소수 [11, 101]를 만들 수 있습니다.</p>\n<ul>\n<li>11과 011은 같은 숫자로 취급합니다.</li>\n</ul>\n</blockquote>\n<h2>문제풀이</h2>\n<p>옛날에 못풀었던 문제 다시 풀어봄.<br>\n완전탐색이라 순열을 이용해서 모든 경우의 수를 구하고,<br>\n11, 011같은 중복 수 제거, 0,1 제거.<br>\n그 후에 소수를 찾아주면 됨.</p>\n<pre><code class=\"language-js\">function solution(numbers) {\n  var answer = 0;\n  let p = permutation([...numbers], \"\");\n  answer = primeArr(p);\n  return answer;\n}\n\nfunction permutation(numbers, total) {\n  return numbers.reduce((acc, val, idx) => {\n    let newArr = [...numbers];\n    newArr.splice(idx, 1);\n    acc.push(total + val);\n    let result = permutation(newArr, total + val);\n    acc.push(...result);\n    return acc;\n  }, []);\n}\n\nfunction primeArr(arr) {\n  // 소수의 갯수 리턴.\n  let answer = 0;\n  arr = [...new Set(arr.map(e => Number(e)))].filter(e => e !== 1 &#x26;&#x26; e !== 0);\n  for (let i = 0; i &#x3C; arr.length; i++) {\n    if (checkPrime(arr[i])) answer++;\n  }\n  return answer;\n}\n\nfunction checkPrime(number) {\n  //소수 판별.\n  for (let i = 2; i &#x3C;= Math.sqrt(number); i++) {\n    if (number % i === 0) return false;\n  }\n  return true;\n}\n</code></pre>\n<h4>아쉬운 점 || 느낀 점</h4>\n<p>오늘 사실 후보키, 조이스틱(전에 못풀었던), 소수 찾기 이 세문제를 풀어봤는데,<br>\n조이스틱은 뭔가를 살짝 놓쳐서 못푼거 같긴 하지만 아직도 풀지 못하고,<br>\n후보키 자체도 정확도가 50점도 안나오는 걸로 봐서는 짠 코드가 틀린 것 같다.<br>\n소수 찾기만 성공했는데.. 알고리즘에 자신감이 붙고, 좀 넘어서 이정도면 된거 아닐까?라는 생각도 했었는데,<br>\n보기 좋게 초심으로 돌아가라는 거 같닼ㅋㅋㅋ. 그래서 오늘은 정말 우여곡절 많은 코테 문제 풀기 였는데,<br>\n앞으로 더 열심히 해야겠다.</p>","frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 소수 찾기","date":"2020년 05월 28일, 23:20"}}},"pageContext":{"slug":"/3/post26/","previous":{"fields":{"slug":"/3/post25/"},"frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 오픈채팅방","path":"/posts/25"}},"next":{"fields":{"slug":"/3/post27/"},"frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 방금그곡","path":"/posts/27"}}}},"staticQueryHashes":["3649515864"],"slicesMap":{}}