{"componentChunkName":"component---src-templates-blog-template-js","path":"/posts/117","result":{"data":{"markdownRemark":{"html":"<h2>디자인 패턴이란?</h2>\n<ul>\n<li>설계 문제에 대한 해답을 문서화하기위해 고안된 형식 방법</li>\n<li>소프트웨어 공학론 안의 좋은 코드를 설계하기 위한 일종의 설계 디자인 방법론</li>\n<li>좋은 코드(SOLID) 원칙이 지켜지는 코드</li>\n<li>GoF(Gang of Fout)\n<ul>\n<li>에리히 감마(Erich Gamma), 리차드 헬름(Richard Helm), 랄프 존슨(Ralph Johnson), 존 블리시디스(John Vissides)</li>\n<li>Design Patterns: Elements of Reusable Object-Oriented Software에서 구체적으로 처음 등장</li>\n<li>23가지의 디자인 패턴을 정리하고, 각각 디자인 패턴을 <strong>생성(Credential)</strong>, <strong>구조(Structural)</strong>, <strong>행위(Behavioral)</strong> 3가지로 구분</li>\n</ul>\n</li>\n</ul>\n<h2>디자인 패턴의 분류(GoF)</h2>\n<ul>\n<li>\n<p><strong>생성(Credential)</strong></p>\n<ul>\n<li>객체의 생성에 관련된 패턴</li>\n<li>객체의 생성과 조합을 캡슐화해 특정 객체가 생성되거나 변경되어도 프로그램 구조에 영향을 크게 받지 않도록 유연성 제공</li>\n<li>종류\n<ul>\n<li>싱글턴(Singleton)</li>\n<li>빌더(Builder)</li>\n<li>팩토리 메소드(Factory Method)</li>\n<li>프로토타입(Prototype)</li>\n<li>추상 팩토리(Abstract Factory)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>구조(Structural) 패턴</strong></p>\n<ul>\n<li>클래스나 객체를 조합해 더 큰 구조를 만드는 패턴</li>\n<li>서로 다른 인터페이스를 지닌 2개의 객체를 묶어 단일 인터페이스로 제공하거나 객체들을 서로 묶어 새로운 기능을 제공하는 패턴</li>\n<li>종류\n<ul>\n<li>어댑터(Adapter)</li>\n<li>브리지(Bridge)</li>\n<li>컴퍼지트(Composite)</li>\n<li>데커레이터(Decorator)</li>\n<li>퍼사드(Facade)</li>\n<li>플라이웨이트(Flyweight)</li>\n<li>프록시(Proxy)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>행위(Behavioral) 패턴</strong></p>\n<ul>\n<li>객체나 클래스 사이의 알고리즘이나 책임 분배에 관련된 패턴</li>\n<li>종류\n<ul>\n<li>책임 연쇄(Chain of Responsibility)</li>\n<li>커맨드(Command)</li>\n<li>인터프리터(Interpreter)</li>\n<li>이터레이터(Iterator)</li>\n<li>미디에이터(Mediator)</li>\n<li>메멘토(Memento)</li>\n<li>옵저버(Observer)</li>\n<li>스테이트(State)</li>\n<li>스트레티지(Strategy)</li>\n<li>템플릿 메소드(Template Method)</li>\n<li>비지터(Visitor)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>참고</h3>\n<ul>\n<li><a href=\"https://ko.wikipedia.org/wiki/%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4\">https://ko.wikipedia.org/wiki/%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4</a></li>\n<li><a href=\"https://jwprogramming.tistory.com/68\">https://jwprogramming.tistory.com/68</a></li>\n<li><a href=\"https://dailyheumsi.tistory.com/148\">https://dailyheumsi.tistory.com/148</a></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>asdfas</th>\n<th>basdfasf</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a</td>\n<td>a</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"title":"[디자인패턴] 디자인 패턴이란?","date":"2021년 02월 19일, 19:30"}}},"pageContext":{"slug":"/12/post117/","previous":{"fields":{"slug":"/12/post116/"},"frontmatter":{"title":"[프로그래머스] 레벨4 (level4) 자동완성","path":"/posts/116"}},"next":{"fields":{"slug":"/12/post118/"},"frontmatter":{"title":"[디자인패턴] 싱글턴(Singleton)","path":"/posts/118"}}}}}