{"componentChunkName":"component---src-templates-blog-template-js","path":"/posts/33","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<h2>N으로 표현</h2>\n<h3>문제설명</h3>\n<p>아래와 같이 5와 사칙연산만으로 12를 표현할 수 있습니다.</p>\n<p>12 = 5 + 5 + (5 / 5) + (5 / 5)\n12 = 55 / 5 + 5 / 5\n12 = (55 + 5) / 5</p>\n<p>5를 사용한 횟수는 각각 6,5,4 입니다. 그리고 이중 가장 작은 경우는 4입니다.\n이처럼 숫자 N과 number가 주어질 때, N과 사칙연산만 사용해서 표현 할 수 있는 방법 중 N 사용횟수의 최솟값을 return 하도록 solution 함수를 작성하세요.</p>\n<p><strong><em>제한사항</em></strong></p>\n<ul>\n<li>N은 1 이상 9 이하입니다.</li>\n<li>number는 1 이상 32,000 이하입니다.</li>\n<li>수식에는 괄호와 사칙연산만 가능하며 나누기 연산에서 나머지는 무시합니다.</li>\n<li>최솟값이 8보다 크면 -1을 return 합니다.</li>\n</ul>\n<p><strong><em>입출력 예</em></strong></p>\n<table>\n<thead>\n<tr>\n<th>N</th>\n<th>number</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5</td>\n<td>12</td>\n<td>4</td>\n</tr>\n<tr>\n<td>2</td>\n<td>11</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>입출력 예 설명</em></strong></p>\n<p><strong>예제 #1</strong>\n문제에 나온 예와 같습니다.</p>\n<p><strong>예제 #2</strong>\n11 = 22 / 2와 같이 2를 3번만 사용하여 표현할 수 있습니다.</p>\n</blockquote>\n<h3>문제풀이</h3>\n<p>진짜 레벨3에 오면서 dp가 많아지고 dp는 진짜 많은 문제풀이가 답이라고 느껴졌다.<br>\n완전 탐색 + 메모제이션을 이용해서 풀어야하는데, 정말 힘들었다.<br>\n솔직히 질문하기에서 본 힌트들과 구글링해서 얻은 힌트들이 아니였으면 못 풀었을 것 같다.</p>\n<ol>\n<li>dep = 1일 때, 즉 N을 한번만 사용하는 경우는, N밖에 없으므로 처리.</li>\n<li>\n<p>dep >= 2일 때부터는 N을 사용해서 만들 수 있는 경우의 수를 합쳐주면 된다.</p>\n<ol>\n<li>N=2 => N=1 + N=1</li>\n<li>N=3 => N=1 + N=2</li>\n<li>N=4 => N=1 + N=3 , N=2 = N=2</li>\n<li>...</li>\n<li>여기서, N=3 => N=2 + N=1 는 고려하지 않아야 한다.(똑같기 때문.)</li>\n</ol>\n</li>\n<li>\n<p>이렇게 경우의 수를 나눈다음,</p>\n<ol>\n<li>+,*,-,/에 대해서 실행하면 된다.</li>\n<li>여기서 중요한 포인트는, -와 /는 위치가 바뀌면 값도 바뀌기 때문에 그 경우도 고려해줘야한다.</li>\n<li>그리고 ex. 55, 555 같은 경우는 dep만큼 숫자를 붙이고 그것을 Set에 넣어주면 된다.</li>\n</ol>\n</li>\n<li>dep가 8보다 큰 경우는 어차피 -1을 리턴하면 된다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  answer <span class=\"token operator\">=</span> <span class=\"token function\">abc</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">abc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> dep<span class=\"token punctuation\">,</span> dp</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dep <span class=\"token operator\">></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  dep<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dep <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    total<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    dp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> dep<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>dep <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> dep <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> dep <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            total<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">+</span> el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            total<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span> el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            total<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>el <span class=\"token operator\">-</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            total<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-</span> el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> total<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>el <span class=\"token operator\">/</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> total<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">/</span> el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    total<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">N</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>dep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    dp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> dep<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">abc</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> dep<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>아쉬운 점 || 느낀 점</h4>\n<p>구글링 + 질문하기의 힘을 빌려 풀었지만, 풀긴 풀었다.<br>\n뭔가 dp는 dp만의 프로그래밍이 있지 않을까? 라는 생각이 처음에 문제를 못푼 이유 같다.<br>\n완전탐색 + 메모제이션을 이용해서 풀면 되는 문제인데, 그 생각을 못했다.<br>\n아직 dp에 관해서 정확한 정의를 모르는 것 같다. (<del>공부하자!</del>)</p>","frontmatter":{"title":"[프로그래머스] 레벨3 (level3) N으로 표현","date":"2020년 06월 04일, 15:22"}}},"pageContext":{"slug":"/4/post33/","previous":{"fields":{"slug":"/4/post32/"},"frontmatter":{"title":"[프로그래머스] 레벨3 (level3) 종이접기","path":"/posts/32"}},"next":{"fields":{"slug":"/4/post34/"},"frontmatter":{"title":"[프로그래머스] 레벨3 (level3) 2 x n 타일링","path":"/posts/34"}}}}}