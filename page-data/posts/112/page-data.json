{"componentChunkName":"component---src-templates-blog-template-js","path":"/posts/112","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<h2>프린터</h2>\n<h3>문제 설명</h3>\n<p>일반적인 프린터는 인쇄 요청이 들어온 순서대로 인쇄합니다. 그렇기 때문에 중요한 문서가 나중에 인쇄될 수 있습니다. 이런 문제를 보완하기 위해 중요도가 높은 문서를 먼저 인쇄하는 프린터를 개발했습니다. 이 새롭게 개발한 프린터는 아래와 같은 방식으로 인쇄 작업을 수행합니다.</p>\n<ol>\n<li>인쇄 대기목록의 가장 앞에 있는 문서(J)를 대기목록에서 꺼냅니다.</li>\n<li>나머지 인쇄 대기목록에서 J보다 중요도가 높은 문서가 한 개라도 존재하면 J를 대기목록의 가장 마지막에 넣습니다.</li>\n<li>그렇지 않으면 J를 인쇄합니다.</li>\n</ol>\n<p>예를 들어, 4개의 문서(A, B, C, D)가 순서대로 인쇄 대기목록에 있고 중요도가 2 1 3 2 라면 C D A B 순으로 인쇄하게 됩니다.</p>\n<p>내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 알고 싶습니다. 위의 예에서 C는 1번째로, A는 3번째로 인쇄됩니다.</p>\n<p>현재 대기목록에 있는 문서의 중요도가 순서대로 담긴 배열 priorities와 내가 인쇄를 요청한 문서가 현재 대기목록의 어떤 위치에 있는지를 알려주는 location이 매개변수로 주어질 때, 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 return 하도록 solution 함수를 작성해주세요.</p>\n<p><strong><em>제한사항</em></strong></p>\n<ul>\n<li>현재 대기목록에는 1개 이상 100개 이하의 문서가 있습니다.</li>\n<li>인쇄 작업의 중요도는 1~9로 표현하며 숫자가 클수록 중요하다는 뜻입니다.</li>\n<li>location은 0 이상 (현재 대기목록에 있는 작업 수 - 1) 이하의 값을 가지며 대기목록의 가장 앞에 있으면 0, 두 번째에 있으면 1로 표현합니다.</li>\n</ul>\n<p><strong><em>입출력 예</em></strong></p>\n<table>\n<thead>\n<tr>\n<th>priorities</th>\n<th>location</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[2, 1, 3, 2]</td>\n<td>2</td>\n<td>1</td>\n</tr>\n<tr>\n<td>[1, 1, 9, 1, 1, 1]</td>\n<td>0</td>\n<td>5</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h3>문제 풀이</h3>\n<p>프린터 작업에 우선순위와 index를 붙여서 새롭게 object로 만들어준다.\n자기 자신보다 우선순위가 높은 작업을 some을 이용해서 찾아준다.</p>\n<ol>\n<li>자기 작업보다 높은 우선 순위가 있다면 자기 자신을 queue의 맨 뒤에 넣는다.</li>\n<li>우선 순위가 자기가 가장 높다면 뽑는다.</li>\n</ol>\n<h3>소스코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">priorities<span class=\"token punctuation\">,</span> location</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> jobs <span class=\"token operator\">=</span> priorities<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">priority<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> index<span class=\"token punctuation\">,</span> priority <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>jobs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> job <span class=\"token operator\">=</span> jobs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">findTopPriority</span><span class=\"token punctuation\">(</span>jobs<span class=\"token punctuation\">,</span> job<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> picked <span class=\"token operator\">=</span> jobs<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      jobs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>picked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> picked <span class=\"token operator\">=</span> jobs<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      answer<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>picked<span class=\"token punctuation\">.</span>index <span class=\"token operator\">===</span> location<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">findTopPriority</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">jobs<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> jobs<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">job</span> <span class=\"token operator\">=></span> job<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">></span> target<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 프린터","date":"2021년 01월 03일, 14:30"}}},"pageContext":{"slug":"/12/post112/","previous":{"fields":{"slug":"/12/post111/"},"frontmatter":{"title":"[프로그래머스] 레벨2 (level2) 다리를 지나는 트럭","path":"/posts/111"}},"next":{"fields":{"slug":"/12/post113/"},"frontmatter":{"title":"[프로그래머스] 레벨3 (level3) 이중우선순위큐","path":"/posts/113"}}}},"staticQueryHashes":["1791144535","3649515864"]}